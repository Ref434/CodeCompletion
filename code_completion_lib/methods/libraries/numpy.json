{
    "ModuleDeprecationWarning": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "VisibleDeprecationWarning": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "__version__": {
        "__add__": "Return self+value.",
        "__class__": "str(object='') -> str",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Return a formatted version of the string as described by format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Return the size of the string in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "partition": "Partition the string into three parts using the given separator.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "title": "Return a version of the string where each word is titlecased.",
        "translate": "Replace each character in the string using the given translation table.",
        "upper": "Return a copy of the string converted to uppercase.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "show_config": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "char": {
        "_clean_args": "",
        "_get_num_chars": "",
        "_to_string_or_unicode_array": "",
        "_use_unicode": "",
        "add": "",
        "array": "",
        "array_function_dispatch": "partial(func, *args, **keywords) - new function with partial application",
        "asarray": "",
        "bool_": "Boolean type (True or False), stored as a byte.",
        "capitalize": "",
        "center": "",
        "character": "Abstract base class of all character string scalar types.",
        "chararray": "",
        "compare_chararrays": "compare_chararrays(a, b, cmp_op, rstrip)",
        "count": "",
        "decode": "",
        "encode": "",
        "endswith": "",
        "equal": "",
        "expandtabs": "",
        "find": "",
        "greater": "",
        "greater_equal": "",
        "index": "",
        "int_": "Signed integer type, compatible with Python `int` and C ``long``.",
        "integer": "Abstract base class of all integer scalar types.",
        "isalnum": "",
        "isalpha": "",
        "isdecimal": "",
        "isdigit": "",
        "islower": "",
        "isnumeric": "",
        "isspace": "",
        "istitle": "",
        "isupper": "",
        "join": "",
        "less": "",
        "less_equal": "",
        "ljust": "",
        "lower": "",
        "lstrip": "",
        "mod": "",
        "multiply": "",
        "narray": "array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0,",
        "ndarray": "ndarray(shape, dtype=float, buffer=None, offset=0,",
        "not_equal": "",
        "object_": "Any Python object.",
        "partition": "",
        "replace": "",
        "rfind": "",
        "rindex": "",
        "rjust": "",
        "rpartition": "",
        "rsplit": "",
        "rstrip": "",
        "set_module": "Decorator for overriding __module__ on a function or class.",
        "split": "",
        "splitlines": "",
        "startswith": "",
        "str_len": "",
        "string_": "A byte string.",
        "strip": "",
        "swapcase": "",
        "title": "",
        "translate": "",
        "unicode_": "A unicode string.",
        "upper": "",
        "zfill": ""
    },
    "rec": {
        "Counter": "Dict subclass for counting hashable items.  Sometimes called a bag",
        "array": "",
        "find_duplicate": "Find duplication in a list, return a list of duplicated elements",
        "format_parser": "",
        "fromarrays": "Create a record array from a (flat) list of arrays",
        "fromfile": "Create an array from binary file data",
        "fromrecords": "Create a recarray from a list of records in text form.",
        "fromstring": "Create a record array from binary data",
        "get_printoptions": "",
        "ndarray": "ndarray(shape, dtype=float, buffer=None, offset=0,",
        "nullcontext": "Context manager that does no additional processing.",
        "os_fspath": "Return the file system path representation of the object.",
        "recarray": "Construct an ndarray that allows field access using attributes.",
        "record": "A data-type scalar that allows field access as attribute lookup.",
        "set_module": "Decorator for overriding __module__ on a function or class."
    },
    "memmap": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "a.__array__([dtype], /) -> reference if type unchanged, copy otherwise.",
        "__array_prepare__": "a.__array_prepare__(obj) -> Object of same type as ndarray object obj.",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__copy__": "a.__copy__()",
        "__deepcopy__": "a.__deepcopy__(memo, /) -> Deep copy of array.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__iadd__": "Return self+=value.",
        "__iand__": "Return self&=value.",
        "__ifloordiv__": "Return self//=value.",
        "__ilshift__": "Return self<<=value.",
        "__imatmul__": "Return self@=value.",
        "__imod__": "Return self%=value.",
        "__imul__": "Return self*=value.",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__ior__": "Return self|=value.",
        "__ipow__": "Return self**=value.",
        "__irshift__": "Return self>>=value.",
        "__isub__": "Return self-=value.",
        "__iter__": "Implement iter(self).",
        "__itruediv__": "Return self/=value.",
        "__ixor__": "Return self^=value.",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__matmul__": "Return self@value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "a.__reduce__()",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmatmul__": "Return value@self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__setstate__": "a.__setstate__(state, /)",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "a.all(axis=None, out=None, keepdims=False, *, where=True)",
        "any": "a.any(axis=None, out=None, keepdims=False, *, where=True)",
        "argmax": "a.argmax(axis=None, out=None)",
        "argmin": "a.argmin(axis=None, out=None)",
        "argpartition": "a.argpartition(kth, axis=-1, kind='introselect', order=None)",
        "argsort": "a.argsort(axis=-1, kind=None, order=None)",
        "astype": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
        "byteswap": "a.byteswap(inplace=False)",
        "choose": "a.choose(choices, out=None, mode='raise')",
        "clip": "a.clip(min=None, max=None, out=None, **kwargs)",
        "compress": "a.compress(condition, axis=None, out=None)",
        "conj": "a.conj()",
        "conjugate": "a.conjugate()",
        "copy": "a.copy(order='C')",
        "cumprod": "a.cumprod(axis=None, dtype=None, out=None)",
        "cumsum": "a.cumsum(axis=None, dtype=None, out=None)",
        "diagonal": "a.diagonal(offset=0, axis1=0, axis2=1)",
        "dot": "a.dot(b, out=None)",
        "dump": "a.dump(file)",
        "dumps": "a.dumps()",
        "fill": "a.fill(value)",
        "flatten": "a.flatten(order='C')",
        "flush": "",
        "getfield": "a.getfield(dtype, offset=0)",
        "item": "a.item(*args)",
        "itemset": "a.itemset(*args)",
        "max": "a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "mean": "a.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
        "min": "a.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "newbyteorder": "arr.newbyteorder(new_order='S', /)",
        "nonzero": "a.nonzero()",
        "partition": "a.partition(kth, axis=-1, kind='introselect', order=None)",
        "prod": "a.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
        "ptp": "a.ptp(axis=None, out=None, keepdims=False)",
        "put": "a.put(indices, values, mode='raise')",
        "ravel": "a.ravel([order])",
        "repeat": "a.repeat(repeats, axis=None)",
        "reshape": "a.reshape(shape, order='C')",
        "resize": "a.resize(new_shape, refcheck=True)",
        "round": "a.round(decimals=0, out=None)",
        "searchsorted": "a.searchsorted(v, side='left', sorter=None)",
        "setfield": "a.setfield(val, dtype, offset=0)",
        "setflags": "a.setflags(write=None, align=None, uic=None)",
        "sort": "a.sort(axis=-1, kind=None, order=None)",
        "squeeze": "a.squeeze(axis=None)",
        "std": "a.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "sum": "a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
        "swapaxes": "a.swapaxes(axis1, axis2)",
        "take": "a.take(indices, axis=None, out=None, mode='raise')",
        "tobytes": "a.tobytes(order='C')",
        "tofile": "a.tofile(fid, sep=\"\", format=\"%s\")",
        "tolist": "a.tolist()",
        "tostring": "a.tostring(order='C')",
        "trace": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "transpose": "a.transpose(*axes)",
        "var": "a.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "view": "a.view([dtype][, type])"
    },
    "newaxis": {
        "__bool__": "True if self else False",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "ndarray": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "a.__array__([dtype], /) -> reference if type unchanged, copy otherwise.",
        "__array_prepare__": "a.__array_prepare__(obj) -> Object of same type as ndarray object obj.",
        "__array_wrap__": "a.__array_wrap__(obj) -> Object of same type as ndarray object a.",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__copy__": "a.__copy__()",
        "__deepcopy__": "a.__deepcopy__(memo, /) -> Deep copy of array.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__iadd__": "Return self+=value.",
        "__iand__": "Return self&=value.",
        "__ifloordiv__": "Return self//=value.",
        "__ilshift__": "Return self<<=value.",
        "__imatmul__": "Return self@=value.",
        "__imod__": "Return self%=value.",
        "__imul__": "Return self*=value.",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__ior__": "Return self|=value.",
        "__ipow__": "Return self**=value.",
        "__irshift__": "Return self>>=value.",
        "__isub__": "Return self-=value.",
        "__iter__": "Implement iter(self).",
        "__itruediv__": "Return self/=value.",
        "__ixor__": "Return self^=value.",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__matmul__": "Return self@value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "a.__reduce__()",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmatmul__": "Return value@self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__setstate__": "a.__setstate__(state, /)",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "a.all(axis=None, out=None, keepdims=False, *, where=True)",
        "any": "a.any(axis=None, out=None, keepdims=False, *, where=True)",
        "argmax": "a.argmax(axis=None, out=None)",
        "argmin": "a.argmin(axis=None, out=None)",
        "argpartition": "a.argpartition(kth, axis=-1, kind='introselect', order=None)",
        "argsort": "a.argsort(axis=-1, kind=None, order=None)",
        "astype": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
        "byteswap": "a.byteswap(inplace=False)",
        "choose": "a.choose(choices, out=None, mode='raise')",
        "clip": "a.clip(min=None, max=None, out=None, **kwargs)",
        "compress": "a.compress(condition, axis=None, out=None)",
        "conj": "a.conj()",
        "conjugate": "a.conjugate()",
        "copy": "a.copy(order='C')",
        "cumprod": "a.cumprod(axis=None, dtype=None, out=None)",
        "cumsum": "a.cumsum(axis=None, dtype=None, out=None)",
        "diagonal": "a.diagonal(offset=0, axis1=0, axis2=1)",
        "dot": "a.dot(b, out=None)",
        "dump": "a.dump(file)",
        "dumps": "a.dumps()",
        "fill": "a.fill(value)",
        "flatten": "a.flatten(order='C')",
        "getfield": "a.getfield(dtype, offset=0)",
        "item": "a.item(*args)",
        "itemset": "a.itemset(*args)",
        "max": "a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "mean": "a.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
        "min": "a.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "newbyteorder": "arr.newbyteorder(new_order='S', /)",
        "nonzero": "a.nonzero()",
        "partition": "a.partition(kth, axis=-1, kind='introselect', order=None)",
        "prod": "a.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
        "ptp": "a.ptp(axis=None, out=None, keepdims=False)",
        "put": "a.put(indices, values, mode='raise')",
        "ravel": "a.ravel([order])",
        "repeat": "a.repeat(repeats, axis=None)",
        "reshape": "a.reshape(shape, order='C')",
        "resize": "a.resize(new_shape, refcheck=True)",
        "round": "a.round(decimals=0, out=None)",
        "searchsorted": "a.searchsorted(v, side='left', sorter=None)",
        "setfield": "a.setfield(val, dtype, offset=0)",
        "setflags": "a.setflags(write=None, align=None, uic=None)",
        "sort": "a.sort(axis=-1, kind=None, order=None)",
        "squeeze": "a.squeeze(axis=None)",
        "std": "a.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "sum": "a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
        "swapaxes": "a.swapaxes(axis1, axis2)",
        "take": "a.take(indices, axis=None, out=None, mode='raise')",
        "tobytes": "a.tobytes(order='C')",
        "tofile": "a.tofile(fid, sep=\"\", format=\"%s\")",
        "tolist": "a.tolist()",
        "tostring": "a.tostring(order='C')",
        "trace": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "transpose": "a.transpose(*axes)",
        "var": "a.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "view": "a.view([dtype][, type])"
    },
    "flatiter": {
        "__array__": "__array__(type=None) Get array from iterator",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__next__": "Implement next(self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "copy": "copy()"
    },
    "nditer": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__next__": "Implement next(self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "close": "close()",
        "copy": "copy()",
        "debug_print": "debug_print()",
        "enable_external_loop": "enable_external_loop()",
        "iternext": "iternext()",
        "remove_axis": "remove_axis(i)",
        "remove_multi_index": "remove_multi_index()",
        "reset": "reset()"
    },
    "nested_iters": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "ufunc": {
        "__call__": "Call self as a function.",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arange": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "array": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "asarray": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "asanyarray": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "ascontiguousarray": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "asfortranarray": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "zeros": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "count_nonzero": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "empty": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "broadcast": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__next__": "Implement next(self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "reset": "reset()"
    },
    "dtype": {
        "__bool__": "True if self else False",
        "__class__": "Preliminary NumPy API: The Type of NumPy DTypes (metaclass)",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rmul__": "Return value*self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "newbyteorder": "newbyteorder(new_order='S', /)"
    },
    "fromstring": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "fromfile": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "frombuffer": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "where": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "argwhere": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "copyto": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "concatenate": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "fastCopyAndTranspose": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "lexsort": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "set_numeric_ops": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "can_cast": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "promote_types": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "min_scalar_type": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "result_type": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "isfortran": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "empty_like": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "zeros_like": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "ones_like": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "correlate": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "convolve": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "inner": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "dot": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "outer": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "vdot": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "roll": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "rollaxis": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "moveaxis": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "cross": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "tensordot": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "little_endian": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "bool(x) -> bool",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "fromiter": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "array_equal": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "array_equiv": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "indices": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "fromfunction": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "isclose": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "isscalar": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "binary_repr": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "base_repr": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "ones": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "identity": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "allclose": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "compare_chararrays": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "putmask": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "flatnonzero": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "Inf": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "inf": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "infty": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "Infinity": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "nan": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "NaN": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "False_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "Boolean type (True or False), stored as a byte.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "True_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "Boolean type (True or False), stored as a byte.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "bitwise_not": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "CLIP": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "RAISE": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "WRAP": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "MAXDIMS": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "BUFSIZE": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ALLOW_THREADS": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ComplexWarning": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "full": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "full_like": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "matmul": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "shares_memory": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "may_share_memory": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "MAY_SHARE_BOUNDS": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "MAY_SHARE_EXACT": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "TooHardError": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "AxisError": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "alen": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "all": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "alltrue": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "amax": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "amin": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "any": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "argmax": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "argmin": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "argpartition": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "argsort": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "around": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "choose": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "clip": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "compress": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "cumprod": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "cumproduct": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "cumsum": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "diagonal": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "mean": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "ndim": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nonzero": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "partition": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "prod": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "product": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "ptp": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "put": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "ravel": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "Return a contiguous flattened array.",
        "_implementation": "Return a contiguous flattened array."
    },
    "repeat": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "reshape": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "resize": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "round_": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "searchsorted": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "shape": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "size": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "sometrue": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "sort": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "squeeze": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "std": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "sum": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "swapaxes": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "take": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "trace": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "transpose": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "var": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "_UFUNC_API": {
        "__class__": "Capsule objects let you wrap a C \"void *\" pointer in a Python",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "ERR_CALL": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_DEFAULT": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_IGNORE": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_LOG": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_PRINT": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_RAISE": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_WARN": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "FLOATING_POINT_SUPPORT": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "FPE_DIVIDEBYZERO": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "FPE_INVALID": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "FPE_OVERFLOW": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "FPE_UNDERFLOW": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "NAN": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "NINF": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "NZERO": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "PINF": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "PZERO": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "SHIFT_DIVIDEBYZERO": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "SHIFT_INVALID": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "SHIFT_OVERFLOW": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "SHIFT_UNDERFLOW": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "UFUNC_BUFSIZE_DEFAULT": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "UFUNC_PYVALS_NAME": {
        "__add__": "Return self+value.",
        "__class__": "str(object='') -> str",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Return a formatted version of the string as described by format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Return the size of the string in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "partition": "Partition the string into three parts using the given separator.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "title": "Return a version of the string where each word is titlecased.",
        "translate": "Replace each character in the string using the given translation table.",
        "upper": "Return a copy of the string converted to uppercase.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "_add_newdoc_ufunc": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "absolute": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "add": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arccos": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arccosh": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arcsin": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arcsinh": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arctan": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arctan2": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arctanh": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "bitwise_and": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "bitwise_or": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "bitwise_xor": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "cbrt": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "ceil": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "conj": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "conjugate": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "copysign": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "cos": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "cosh": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "deg2rad": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "degrees": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "divide": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "divmod": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "e": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "equal": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "euler_gamma": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "exp": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "exp2": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "expm1": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "fabs": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "floor": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "floor_divide": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "float_power": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "fmax": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "fmin": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "fmod": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "frexp": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "frompyfunc": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "gcd": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "geterrobj": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "greater": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "greater_equal": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "heaviside": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "hypot": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "invert": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "isfinite": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "isinf": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "isnan": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "isnat": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "lcm": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "ldexp": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "left_shift": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "less": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "less_equal": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "log": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "log10": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "log1p": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "log2": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logaddexp": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logaddexp2": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logical_and": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logical_not": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logical_or": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logical_xor": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "maximum": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "minimum": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "mod": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "modf": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "multiply": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "negative": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "nextafter": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "not_equal": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "pi": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "Convert a string or number to a floating point number, if possible.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "Formats the float according to format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__round__": "Return the Integral closest to x, rounding half toward even.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "positive": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "power": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "rad2deg": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "radians": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "reciprocal": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "remainder": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "right_shift": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "rint": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "seterrobj": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "sign": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "signbit": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "sin": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "sinh": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "spacing": {
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "sqrt": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "square": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "subtract": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "tan": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "tanh": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "true_divide": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "trunc": {
        "__call__": "Call self as a function.",
        "__class__": "Functions that operate element by element on whole arrays.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "sctypeDict": {
        "__class__": "dict() -> new empty dictionary",
        "__class_getitem__": "See PEP 585",
        "__contains__": "True if the dictionary has the specified key, else False.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "x.__getitem__(y) <==> x[y]",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__ior__": "Return self|=value.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__reversed__": "Return a reverse iterator over the dict keys.",
        "__ror__": "Return value|self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__sizeof__": "D.__sizeof__() -> size of D in memory, in bytes",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "sctypes": {
        "__class__": "dict() -> new empty dictionary",
        "__class_getitem__": "See PEP 585",
        "__contains__": "True if the dictionary has the specified key, else False.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "x.__getitem__(y) <==> x[y]",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__ior__": "Return self|=value.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__reversed__": "Return a reverse iterator over the dict keys.",
        "__ror__": "Return value|self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__sizeof__": "D.__sizeof__() -> size of D in memory, in bytes",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "ScalarType": {
        "__add__": "Return self+value.",
        "__class__": "Built-in immutable sequence.",
        "__class_getitem__": "See PEP 585",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rmul__": "Return value*self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "count": "Return number of occurrences of value.",
        "index": "Return first index of value."
    },
    "obj2sctype": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "cast": {
        "__class__": "",
        "__class_getitem__": "See PEP 585",
        "__contains__": "True if the dictionary has the specified key, else False.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__ior__": "Return self|=value.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__reversed__": "Return a reverse iterator over the dict keys.",
        "__ror__": "Return value|self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__sizeof__": "D.__sizeof__() -> size of D in memory, in bytes",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "nbytes": {
        "__class__": "",
        "__class_getitem__": "See PEP 585",
        "__contains__": "True if the dictionary has the specified key, else False.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__ior__": "Return self|=value.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__reversed__": "Return a reverse iterator over the dict keys.",
        "__ror__": "Return value|self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__sizeof__": "D.__sizeof__() -> size of D in memory, in bytes",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "sctype2char": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "maximum_sctype": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "issctype": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "typecodes": {
        "__class__": "dict() -> new empty dictionary",
        "__class_getitem__": "See PEP 585",
        "__contains__": "True if the dictionary has the specified key, else False.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "x.__getitem__(y) <==> x[y]",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__ior__": "Return self|=value.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__reversed__": "Return a reverse iterator over the dict keys.",
        "__ror__": "Return value|self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__sizeof__": "D.__sizeof__() -> size of D in memory, in bytes",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "find_common_type": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "issubdtype": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "datetime_data": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "datetime_as_string": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "busday_offset": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "busday_count": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "is_busday": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "busdaycalendar": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "byte": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "ubyte": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "short": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "ushort": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "intp": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uintp": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "longlong": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "ulonglong": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "half": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "half.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "double": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "double.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "longdouble": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "longdouble.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "cfloat": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "cdouble": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "clongdouble": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "void": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "generic": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "number": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "integer": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "inexact": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "signedinteger": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "unsignedinteger": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "floating": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "complexfloating": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "flexible": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "character": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "bool8": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int64": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint64": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "float16": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "half.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "float32": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "single.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "float64": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "double.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "complex64": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "complex128": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "object0": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__call__": "Call self as a function.",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__iadd__": "Implement self+=value.",
        "__imul__": "Implement self*=value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "bytes0": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "B.capitalize() -> copy of B",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "B.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "decode": "Decode the bytes using the codec registered for encoding.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "endswith": "B.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "B.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a bytes object from a string of hexadecimal numbers.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Create a str of hexadecimal numbers from a bytes object.",
        "index": "B.index(sub[, start[, end]]) -> int",
        "isalnum": "B.isalnum() -> bool",
        "isalpha": "B.isalpha() -> bool",
        "isascii": "B.isascii() -> bool",
        "isdigit": "B.isdigit() -> bool",
        "islower": "B.islower() -> bool",
        "isspace": "B.isspace() -> bool",
        "istitle": "B.istitle() -> bool",
        "isupper": "B.isupper() -> bool",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of bytes objects.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "B.lower() -> copy of B",
        "lstrip": "Strip leading bytes contained in the argument.",
        "maketrans": "Return a translation table useable for the bytes or bytearray translate method.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the bytes into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a bytes object with the given prefix string removed if present.",
        "removesuffix": "Return a bytes object with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "B.rfind(sub[, start[, end]]) -> int",
        "rindex": "B.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the bytes into three parts using the given separator.",
        "rsplit": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "rstrip": "Strip trailing bytes contained in the argument.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "splitlines": "Return a list of the lines in the bytes, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "B.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Strip leading and trailing bytes contained in the argument.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "B.swapcase() -> copy of B",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "B.title() -> copy of B",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Return a copy with each character mapped by the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "B.upper() -> copy of B",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "str0": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "Return a formatted version of the string as described by format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Return the size of the string in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the string into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "Return a version of the string where each word is titlecased.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Replace each character in the string using the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "Return a copy of the string converted to uppercase.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "void0": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "datetime64": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "timedelta64": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "Bytes0": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "B.capitalize() -> copy of B",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "B.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "decode": "Decode the bytes using the codec registered for encoding.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "endswith": "B.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "B.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a bytes object from a string of hexadecimal numbers.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Create a str of hexadecimal numbers from a bytes object.",
        "index": "B.index(sub[, start[, end]]) -> int",
        "isalnum": "B.isalnum() -> bool",
        "isalpha": "B.isalpha() -> bool",
        "isascii": "B.isascii() -> bool",
        "isdigit": "B.isdigit() -> bool",
        "islower": "B.islower() -> bool",
        "isspace": "B.isspace() -> bool",
        "istitle": "B.istitle() -> bool",
        "isupper": "B.isupper() -> bool",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of bytes objects.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "B.lower() -> copy of B",
        "lstrip": "Strip leading bytes contained in the argument.",
        "maketrans": "Return a translation table useable for the bytes or bytearray translate method.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the bytes into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a bytes object with the given prefix string removed if present.",
        "removesuffix": "Return a bytes object with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "B.rfind(sub[, start[, end]]) -> int",
        "rindex": "B.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the bytes into three parts using the given separator.",
        "rsplit": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "rstrip": "Strip trailing bytes contained in the argument.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "splitlines": "Return a list of the lines in the bytes, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "B.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Strip leading and trailing bytes contained in the argument.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "B.swapcase() -> copy of B",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "B.title() -> copy of B",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Return a copy with each character mapped by the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "B.upper() -> copy of B",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "Datetime64": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "Str0": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "Return a formatted version of the string as described by format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Return the size of the string in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the string into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "Return a version of the string where each word is titlecased.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Replace each character in the string using the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "Return a copy of the string converted to uppercase.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "Uint64": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int32": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint32": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int16": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint16": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int8": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint8": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "complex_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int0": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint0": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "single": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "single.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "csingle": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "singlecomplex": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "float_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__ceil__": "Return the ceiling as an Integral.",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Return the floor as an Integral.",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getformat__": "You probably don't want to use this function.",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setformat__": "You probably don't want to use this function.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Return the Integral closest to x between 0 and x.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "double.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "intc": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uintc": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "longfloat": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "longdouble.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "clongfloat": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "longcomplex": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "bool_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "bytes_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "B.capitalize() -> copy of B",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "B.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "decode": "Decode the bytes using the codec registered for encoding.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "endswith": "B.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "B.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a bytes object from a string of hexadecimal numbers.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Create a str of hexadecimal numbers from a bytes object.",
        "index": "B.index(sub[, start[, end]]) -> int",
        "isalnum": "B.isalnum() -> bool",
        "isalpha": "B.isalpha() -> bool",
        "isascii": "B.isascii() -> bool",
        "isdigit": "B.isdigit() -> bool",
        "islower": "B.islower() -> bool",
        "isspace": "B.isspace() -> bool",
        "istitle": "B.istitle() -> bool",
        "isupper": "B.isupper() -> bool",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of bytes objects.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "B.lower() -> copy of B",
        "lstrip": "Strip leading bytes contained in the argument.",
        "maketrans": "Return a translation table useable for the bytes or bytearray translate method.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the bytes into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a bytes object with the given prefix string removed if present.",
        "removesuffix": "Return a bytes object with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "B.rfind(sub[, start[, end]]) -> int",
        "rindex": "B.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the bytes into three parts using the given separator.",
        "rsplit": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "rstrip": "Strip trailing bytes contained in the argument.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "splitlines": "Return a list of the lines in the bytes, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "B.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Strip leading and trailing bytes contained in the argument.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "B.swapcase() -> copy of B",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "B.title() -> copy of B",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Return a copy with each character mapped by the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "B.upper() -> copy of B",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "string_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "B.capitalize() -> copy of B",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "B.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "decode": "Decode the bytes using the codec registered for encoding.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "endswith": "B.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "B.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a bytes object from a string of hexadecimal numbers.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Create a str of hexadecimal numbers from a bytes object.",
        "index": "B.index(sub[, start[, end]]) -> int",
        "isalnum": "B.isalnum() -> bool",
        "isalpha": "B.isalpha() -> bool",
        "isascii": "B.isascii() -> bool",
        "isdigit": "B.isdigit() -> bool",
        "islower": "B.islower() -> bool",
        "isspace": "B.isspace() -> bool",
        "istitle": "B.istitle() -> bool",
        "isupper": "B.isupper() -> bool",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of bytes objects.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "B.lower() -> copy of B",
        "lstrip": "Strip leading bytes contained in the argument.",
        "maketrans": "Return a translation table useable for the bytes or bytearray translate method.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the bytes into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a bytes object with the given prefix string removed if present.",
        "removesuffix": "Return a bytes object with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "B.rfind(sub[, start[, end]]) -> int",
        "rindex": "B.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the bytes into three parts using the given separator.",
        "rsplit": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "rstrip": "Strip trailing bytes contained in the argument.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "splitlines": "Return a list of the lines in the bytes, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "B.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Strip leading and trailing bytes contained in the argument.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "B.swapcase() -> copy of B",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "B.title() -> copy of B",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Return a copy with each character mapped by the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "B.upper() -> copy of B",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "str_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "Return a formatted version of the string as described by format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Return the size of the string in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the string into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "Return a version of the string where each word is titlecased.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Replace each character in the string using the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "Return a copy of the string converted to uppercase.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "unicode_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "Return a formatted version of the string as described by format_spec.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Return the size of the string in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the string into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "Return a version of the string where each word is titlecased.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Replace each character in the string using the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "Return a copy of the string converted to uppercase.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "object_": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__call__": "Call self as a function.",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__iadd__": "Implement self+=value.",
        "__imul__": "Implement self*=value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "array2string": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "array_str": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "array_repr": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "set_string_function": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "set_printoptions": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "get_printoptions": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "printoptions": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "Context manager for setting print options."
    },
    "format_float_positional": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "format_float_scientific": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "require": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "seterr": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "geterr": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "setbufsize": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "getbufsize": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "seterrcall": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "geterrcall": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "errstate": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "_recreate_cm": "Return a recreated instance of self."
    },
    "record": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype",
        "__array_wrap__": "sc.__array_wrap__(obj) return scalar from array",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__format__": "NumPy array scalar formatter",
        "__ge__": "Return self>=value.",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce_ex__": "Helper for pickle.",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setitem__": "Set self[key] to value.",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "pprint": "Pretty-print all fields.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "recarray": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "a.__array__([dtype], /) -> reference if type unchanged, copy otherwise.",
        "__array_prepare__": "a.__array_prepare__(obj) -> Object of same type as ndarray object obj.",
        "__array_wrap__": "a.__array_wrap__(obj) -> Object of same type as ndarray object a.",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__copy__": "a.__copy__()",
        "__deepcopy__": "a.__deepcopy__(memo, /) -> Deep copy of array.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__gt__": "Return self>value.",
        "__iadd__": "Return self+=value.",
        "__iand__": "Return self&=value.",
        "__ifloordiv__": "Return self//=value.",
        "__ilshift__": "Return self<<=value.",
        "__imatmul__": "Return self@=value.",
        "__imod__": "Return self%=value.",
        "__imul__": "Return self*=value.",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__ior__": "Return self|=value.",
        "__ipow__": "Return self**=value.",
        "__irshift__": "Return self>>=value.",
        "__isub__": "Return self-=value.",
        "__iter__": "Implement iter(self).",
        "__itruediv__": "Return self/=value.",
        "__ixor__": "Return self^=value.",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__matmul__": "Return self@value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "a.__reduce__()",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmatmul__": "Return value@self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setitem__": "Set self[key] to value.",
        "__setstate__": "a.__setstate__(state, /)",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "a.all(axis=None, out=None, keepdims=False, *, where=True)",
        "any": "a.any(axis=None, out=None, keepdims=False, *, where=True)",
        "argmax": "a.argmax(axis=None, out=None)",
        "argmin": "a.argmin(axis=None, out=None)",
        "argpartition": "a.argpartition(kth, axis=-1, kind='introselect', order=None)",
        "argsort": "a.argsort(axis=-1, kind=None, order=None)",
        "astype": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
        "byteswap": "a.byteswap(inplace=False)",
        "choose": "a.choose(choices, out=None, mode='raise')",
        "clip": "a.clip(min=None, max=None, out=None, **kwargs)",
        "compress": "a.compress(condition, axis=None, out=None)",
        "conj": "a.conj()",
        "conjugate": "a.conjugate()",
        "copy": "a.copy(order='C')",
        "cumprod": "a.cumprod(axis=None, dtype=None, out=None)",
        "cumsum": "a.cumsum(axis=None, dtype=None, out=None)",
        "diagonal": "a.diagonal(offset=0, axis1=0, axis2=1)",
        "dot": "a.dot(b, out=None)",
        "dump": "a.dump(file)",
        "dumps": "a.dumps()",
        "fill": "a.fill(value)",
        "flatten": "a.flatten(order='C')",
        "getfield": "a.getfield(dtype, offset=0)",
        "item": "a.item(*args)",
        "itemset": "a.itemset(*args)",
        "max": "a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "mean": "a.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
        "min": "a.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "newbyteorder": "arr.newbyteorder(new_order='S', /)",
        "nonzero": "a.nonzero()",
        "partition": "a.partition(kth, axis=-1, kind='introselect', order=None)",
        "prod": "a.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
        "ptp": "a.ptp(axis=None, out=None, keepdims=False)",
        "put": "a.put(indices, values, mode='raise')",
        "ravel": "a.ravel([order])",
        "repeat": "a.repeat(repeats, axis=None)",
        "reshape": "a.reshape(shape, order='C')",
        "resize": "a.resize(new_shape, refcheck=True)",
        "round": "a.round(decimals=0, out=None)",
        "searchsorted": "a.searchsorted(v, side='left', sorter=None)",
        "setfield": "a.setfield(val, dtype, offset=0)",
        "setflags": "a.setflags(write=None, align=None, uic=None)",
        "sort": "a.sort(axis=-1, kind=None, order=None)",
        "squeeze": "a.squeeze(axis=None)",
        "std": "a.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "sum": "a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
        "swapaxes": "a.swapaxes(axis1, axis2)",
        "take": "a.take(indices, axis=None, out=None, mode='raise')",
        "tobytes": "a.tobytes(order='C')",
        "tofile": "a.tofile(fid, sep=\"\", format=\"%s\")",
        "tolist": "a.tolist()",
        "tostring": "a.tostring(order='C')",
        "trace": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "transpose": "a.transpose(*axes)",
        "var": "a.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "view": "a.view([dtype][, type])"
    },
    "format_parser": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "_parseFormats": " Parse the field formats ",
        "_setfieldnames": "convert input field names into a list and assign to the _names"
    },
    "chararray": {
        "__abs__": "abs(self)",
        "__add__": "",
        "__and__": "Return self&value.",
        "__array__": "a.__array__([dtype], /) -> reference if type unchanged, copy otherwise.",
        "__array_prepare__": "a.__array_prepare__(obj) -> Object of same type as ndarray object obj.",
        "__array_wrap__": "a.__array_wrap__(obj) -> Object of same type as ndarray object a.",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__copy__": "a.__copy__()",
        "__deepcopy__": "a.__deepcopy__(memo, /) -> Deep copy of array.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__ge__": "",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "",
        "__iadd__": "Return self+=value.",
        "__iand__": "Return self&=value.",
        "__ifloordiv__": "Return self//=value.",
        "__ilshift__": "Return self<<=value.",
        "__imatmul__": "Return self@=value.",
        "__imod__": "Return self%=value.",
        "__imul__": "Return self*=value.",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__ior__": "Return self|=value.",
        "__ipow__": "Return self**=value.",
        "__irshift__": "Return self>>=value.",
        "__isub__": "Return self-=value.",
        "__iter__": "Implement iter(self).",
        "__itruediv__": "Return self/=value.",
        "__ixor__": "Return self^=value.",
        "__le__": "",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "",
        "__matmul__": "Return self@value.",
        "__mod__": "",
        "__mul__": "",
        "__ne__": "",
        "__neg__": "-self",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "a.__reduce__()",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmatmul__": "Return value@self.",
        "__rmul__": "",
        "__ror__": "Return value|self.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__setstate__": "a.__setstate__(state, /)",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "all": "a.all(axis=None, out=None, keepdims=False, *, where=True)",
        "any": "a.any(axis=None, out=None, keepdims=False, *, where=True)",
        "argmax": "a.argmax(axis=None, out=None)",
        "argmin": "a.argmin(axis=None, out=None)",
        "argpartition": "a.argpartition(kth, axis=-1, kind='introselect', order=None)",
        "astype": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
        "byteswap": "a.byteswap(inplace=False)",
        "capitalize": "",
        "center": "",
        "choose": "a.choose(choices, out=None, mode='raise')",
        "clip": "a.clip(min=None, max=None, out=None, **kwargs)",
        "compress": "a.compress(condition, axis=None, out=None)",
        "conj": "a.conj()",
        "conjugate": "a.conjugate()",
        "copy": "a.copy(order='C')",
        "count": "",
        "cumprod": "a.cumprod(axis=None, dtype=None, out=None)",
        "cumsum": "a.cumsum(axis=None, dtype=None, out=None)",
        "decode": "",
        "diagonal": "a.diagonal(offset=0, axis1=0, axis2=1)",
        "dot": "a.dot(b, out=None)",
        "dump": "a.dump(file)",
        "dumps": "a.dumps()",
        "encode": "",
        "endswith": "",
        "expandtabs": "",
        "fill": "a.fill(value)",
        "find": "",
        "flatten": "a.flatten(order='C')",
        "getfield": "a.getfield(dtype, offset=0)",
        "index": "",
        "isalnum": "",
        "isalpha": "",
        "isdecimal": "",
        "isdigit": "",
        "islower": "",
        "isnumeric": "",
        "isspace": "",
        "istitle": "",
        "isupper": "",
        "item": "a.item(*args)",
        "itemset": "a.itemset(*args)",
        "join": "",
        "ljust": "",
        "lower": "",
        "lstrip": "",
        "max": "a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "mean": "a.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
        "min": "a.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "newbyteorder": "arr.newbyteorder(new_order='S', /)",
        "nonzero": "a.nonzero()",
        "partition": "",
        "prod": "a.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
        "ptp": "a.ptp(axis=None, out=None, keepdims=False)",
        "put": "a.put(indices, values, mode='raise')",
        "ravel": "a.ravel([order])",
        "repeat": "a.repeat(repeats, axis=None)",
        "replace": "",
        "reshape": "a.reshape(shape, order='C')",
        "resize": "a.resize(new_shape, refcheck=True)",
        "rfind": "",
        "rindex": "",
        "rjust": "",
        "round": "a.round(decimals=0, out=None)",
        "rpartition": "",
        "rsplit": "",
        "rstrip": "",
        "searchsorted": "a.searchsorted(v, side='left', sorter=None)",
        "setfield": "a.setfield(val, dtype, offset=0)",
        "setflags": "a.setflags(write=None, align=None, uic=None)",
        "sort": "a.sort(axis=-1, kind=None, order=None)",
        "split": "",
        "splitlines": "",
        "squeeze": "a.squeeze(axis=None)",
        "startswith": "",
        "std": "a.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "strip": "",
        "sum": "a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
        "swapaxes": "a.swapaxes(axis1, axis2)",
        "swapcase": "",
        "take": "a.take(indices, axis=None, out=None, mode='raise')",
        "title": "",
        "tobytes": "a.tobytes(order='C')",
        "tofile": "a.tofile(fid, sep=\"\", format=\"%s\")",
        "tolist": "a.tolist()",
        "tostring": "a.tostring(order='C')",
        "trace": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "translate": "",
        "transpose": "a.transpose(*axes)",
        "upper": "",
        "var": "a.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "view": "a.view([dtype][, type])",
        "zfill": ""
    },
    "logspace": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "linspace": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "geomspace": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "MachAr": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "finfo": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "iinfo": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "String representation.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "atleast_1d": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "atleast_2d": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "atleast_3d": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "block": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "hstack": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "stack": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "vstack": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "einsum": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "einsum_path": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "matrix": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__array__": "a.__array__([dtype], /) -> reference if type unchanged, copy otherwise.",
        "__array_prepare__": "a.__array_prepare__(obj) -> Object of same type as ndarray object obj.",
        "__array_wrap__": "a.__array_wrap__(obj) -> Object of same type as ndarray object a.",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__contains__": "Return key in self.",
        "__copy__": "a.__copy__()",
        "__deepcopy__": "a.__deepcopy__(memo, /) -> Deep copy of array.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__iadd__": "Return self+=value.",
        "__iand__": "Return self&=value.",
        "__ifloordiv__": "Return self//=value.",
        "__ilshift__": "Return self<<=value.",
        "__imatmul__": "Return self@=value.",
        "__imod__": "Return self%=value.",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__ior__": "Return self|=value.",
        "__irshift__": "Return self>>=value.",
        "__isub__": "Return self-=value.",
        "__iter__": "Implement iter(self).",
        "__itruediv__": "Return self/=value.",
        "__ixor__": "Return self^=value.",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__matmul__": "Return self@value.",
        "__mod__": "Return self%value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "a.__reduce__()",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmatmul__": "Return value@self.",
        "__rmod__": "Return value%self.",
        "__ror__": "Return value|self.",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__setstate__": "a.__setstate__(state, /)",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__xor__": "Return self^value.",
        "_align": "A convenience function for operations that need to preserve axis",
        "_collapse": "A convenience function for operations that want to collapse",
        "all": "",
        "any": "",
        "argmax": "",
        "argmin": "",
        "argpartition": "a.argpartition(kth, axis=-1, kind='introselect', order=None)",
        "argsort": "a.argsort(axis=-1, kind=None, order=None)",
        "astype": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
        "byteswap": "a.byteswap(inplace=False)",
        "choose": "a.choose(choices, out=None, mode='raise')",
        "clip": "a.clip(min=None, max=None, out=None, **kwargs)",
        "compress": "a.compress(condition, axis=None, out=None)",
        "conj": "a.conj()",
        "conjugate": "a.conjugate()",
        "copy": "a.copy(order='C')",
        "cumprod": "a.cumprod(axis=None, dtype=None, out=None)",
        "cumsum": "a.cumsum(axis=None, dtype=None, out=None)",
        "diagonal": "a.diagonal(offset=0, axis1=0, axis2=1)",
        "dot": "a.dot(b, out=None)",
        "dump": "a.dump(file)",
        "dumps": "a.dumps()",
        "fill": "a.fill(value)",
        "flatten": "",
        "getA": "",
        "getA1": "",
        "getH": "",
        "getI": "",
        "getT": "",
        "getfield": "a.getfield(dtype, offset=0)",
        "item": "a.item(*args)",
        "itemset": "a.itemset(*args)",
        "max": "",
        "mean": "",
        "min": "",
        "newbyteorder": "arr.newbyteorder(new_order='S', /)",
        "nonzero": "a.nonzero()",
        "partition": "a.partition(kth, axis=-1, kind='introselect', order=None)",
        "prod": "",
        "ptp": "",
        "put": "a.put(indices, values, mode='raise')",
        "ravel": "",
        "repeat": "a.repeat(repeats, axis=None)",
        "reshape": "a.reshape(shape, order='C')",
        "resize": "a.resize(new_shape, refcheck=True)",
        "round": "a.round(decimals=0, out=None)",
        "searchsorted": "a.searchsorted(v, side='left', sorter=None)",
        "setfield": "a.setfield(val, dtype, offset=0)",
        "setflags": "a.setflags(write=None, align=None, uic=None)",
        "sort": "a.sort(axis=-1, kind=None, order=None)",
        "squeeze": "",
        "std": "",
        "sum": "",
        "swapaxes": "a.swapaxes(axis1, axis2)",
        "take": "a.take(indices, axis=None, out=None, mode='raise')",
        "tobytes": "a.tobytes(order='C')",
        "tofile": "a.tofile(fid, sep=\"\", format=\"%s\")",
        "tolist": "",
        "tostring": "a.tostring(order='C')",
        "trace": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "transpose": "a.transpose(*axes)",
        "var": "",
        "view": "a.view([dtype][, type])"
    },
    "bmat": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "mat": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "asmatrix": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "emath": {
        "_fix_int_lt_zero": "Convert `x` to double if it has real, negative components.",
        "_fix_real_abs_gt_1": "Convert `x` to complex if it has real components x_i with abs(x_i)>1.",
        "_fix_real_lt_zero": "Convert `x` to complex if it has real, negative components.",
        "_tocomplex": "Convert its input `arr` to a complex array.",
        "any": "",
        "arccos": "",
        "arcsin": "",
        "arctanh": "",
        "array_function_dispatch": "Decorator for adding dispatch with the __array_function__ protocol.",
        "asarray": "asarray(a, dtype=None, order=None, *, like=None)",
        "isreal": "",
        "log": "",
        "log10": "",
        "log2": "",
        "logn": "",
        "power": "",
        "sqrt": ""
    },
    "math": {
        "__loader__": "Meta path import for built-in modules.",
        "acos": "Return the arc cosine (measured in radians) of x.",
        "acosh": "Return the inverse hyperbolic cosine of x.",
        "asin": "Return the arc sine (measured in radians) of x.",
        "asinh": "Return the inverse hyperbolic sine of x.",
        "atan": "Return the arc tangent (measured in radians) of x.",
        "atan2": "Return the arc tangent (measured in radians) of y/x.",
        "atanh": "Return the inverse hyperbolic tangent of x.",
        "ceil": "Return the ceiling of x as an Integral.",
        "comb": "Number of ways to choose k items from n items without repetition and without order.",
        "copysign": "Return a float with the magnitude (absolute value) of x but the sign of y.",
        "cos": "Return the cosine of x (measured in radians).",
        "cosh": "Return the hyperbolic cosine of x.",
        "degrees": "Convert angle x from radians to degrees.",
        "dist": "Return the Euclidean distance between two points p and q.",
        "erf": "Error function at x.",
        "erfc": "Complementary error function at x.",
        "exp": "Return e raised to the power of x.",
        "expm1": "Return exp(x)-1.",
        "fabs": "Return the absolute value of the float x.",
        "factorial": "Find x!.",
        "floor": "Return the floor of x as an Integral.",
        "fmod": "Return fmod(x, y), according to platform C.",
        "frexp": "Return the mantissa and exponent of x, as pair (m, e).",
        "fsum": "Return an accurate floating point sum of values in the iterable seq.",
        "gamma": "Gamma function at x.",
        "gcd": "Greatest Common Divisor.",
        "hypot": "hypot(*coordinates) -> value",
        "isclose": "Determine whether two floating point numbers are close in value.",
        "isfinite": "Return True if x is neither an infinity nor a NaN, and False otherwise.",
        "isinf": "Return True if x is a positive or negative infinity, and False otherwise.",
        "isnan": "Return True if x is a NaN (not a number), and False otherwise.",
        "isqrt": "Return the integer part of the square root of the input.",
        "lcm": "Least Common Multiple.",
        "ldexp": "Return x * (2**i).",
        "lgamma": "Natural logarithm of absolute value of Gamma function at x.",
        "log": "log(x, [base=math.e])",
        "log10": "Return the base 10 logarithm of x.",
        "log1p": "Return the natural logarithm of 1+x (base e).",
        "log2": "Return the base 2 logarithm of x.",
        "modf": "Return the fractional and integer parts of x.",
        "nextafter": "Return the next floating-point value after x towards y.",
        "perm": "Number of ways to choose k items from n items without repetition and with order.",
        "pow": "Return x**y (x to the power of y).",
        "prod": "Calculate the product of all the elements in the input iterable.",
        "radians": "Convert angle x from degrees to radians.",
        "remainder": "Difference between x and the closest integer multiple of y.",
        "sin": "Return the sine of x (measured in radians).",
        "sinh": "Return the hyperbolic sine of x.",
        "sqrt": "Return the square root of x.",
        "tan": "Return the tangent of x (measured in radians).",
        "tanh": "Return the hyperbolic tangent of x.",
        "trunc": "Truncates the Real x to the nearest Integral toward 0.",
        "ulp": "Return the value of the least significant bit of the float x."
    },
    "tracemalloc_domain": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "iscomplexobj": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "isrealobj": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "imag": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "iscomplex": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "isreal": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nan_to_num": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "real": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "real_if_close": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "typename": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "asfarray": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "mintypecode": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "asscalar": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "common_type": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "ravel_multi_index": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "unravel_index": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "mgrid": {
        "__class__": "",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "ogrid": {
        "__class__": "",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "r_": {
        "__class__": "",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "concatenate": "",
        "makemat": ""
    },
    "c_": {
        "__class__": "",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "concatenate": "",
        "makemat": ""
    },
    "s_": {
        "__class__": "",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "index_exp": {
        "__class__": "",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "ix_": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "ndenumerate": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__next__": "",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "ndindex": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__next__": "",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "ndincr": ""
    },
    "fill_diagonal": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "Fill the main diagonal of the given array of any dimensionality.",
        "_implementation": "Fill the main diagonal of the given array of any dimensionality."
    },
    "diag_indices": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "diag_indices_from": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "select": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "piecewise": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "trim_zeros": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "copy": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "iterable": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "percentile": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "diff": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "gradient": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "angle": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "unwrap": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "sort_complex": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "disp": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "flip": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "rot90": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "extract": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "place": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "vectorize": {
        "__call__": "",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "_get_ufunc_and_otypes": "Return (ufunc, otypes).",
        "_vectorize_call": "Vectorized call to `func` over positional `args`.",
        "_vectorize_call_with_signature": "Vectorized call over positional arguments with a signature."
    },
    "asarray_chkfinite": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "average": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "bincount": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "digitize": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "cov": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "corrcoef": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "msort": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "median": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "sinc": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "hamming": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "hanning": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "bartlett": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "blackman": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "kaiser": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "trapz": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "i0": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "add_newdoc": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "add_docstring": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "meshgrid": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "delete": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "insert": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "append": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "interp": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "add_newdoc_ufunc": {
        "__call__": "Call self as a function.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "quantile": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "column_stack": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "row_stack": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "dstack": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "array_split": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "split": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "hsplit": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "vsplit": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "dsplit": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "apply_over_axes": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "expand_dims": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "apply_along_axis": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "kron": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "tile": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "get_array_wrap": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "take_along_axis": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "put_along_axis": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "broadcast_to": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "Broadcast an array to a new shape.",
        "_implementation": "Broadcast an array to a new shape."
    },
    "broadcast_arrays": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "broadcast_shapes": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "diag": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "diagflat": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "eye": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "fliplr": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "flipud": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "tri": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "triu": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "tril": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "vander": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "histogram2d": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "mask_indices": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "tril_indices": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "tril_indices_from": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "triu_indices": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "triu_indices_from": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "fix": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "isneginf": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "isposinf": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "pad": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "poly": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "roots": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "polyint": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "polyder": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "polyadd": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "polysub": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "polymul": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "polydiv": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "polyval": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "poly1d": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "deriv": "",
        "integ": ""
    },
    "polyfit": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "RankWarning": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "issubclass_": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "issubsctype": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "deprecate": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "deprecate_with_doc": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "get_include": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "info": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "source": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "who": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "lookfor": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "byte_bounds": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "safe_eval": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "ediff1d": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "intersect1d": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "setxor1d": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "union1d": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "setdiff1d": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "unique": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "in1d": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "isin": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "savetxt": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "loadtxt": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "genfromtxt": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "ndfromtxt": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "mafromtxt": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "recfromtxt": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "recfromcsv": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "load": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "loads": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "save": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "savez": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "Save several arrays into a single file in uncompressed ``.npz`` format.",
        "_implementation": "Save several arrays into a single file in uncompressed ``.npz`` format."
    },
    "savez_compressed": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "packbits": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "unpackbits": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "fromregex": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "DataSource": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Create a DataSource with a local path at destpath.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "_cache": "Cache the file specified by path.",
        "_findfile": "Searches for ``path`` and returns full path if found.",
        "_isurl": "Test if path is a net location.  Tests the scheme and netloc.",
        "_iswritemode": "Test if the given mode will open a file for writing.",
        "_iszip": "Test if the filename is a zip file by looking at the file extension.",
        "_possible_names": "Return a tuple containing compressed filename variations.",
        "_sanitize_relative_path": "Return a sanitised relative path for which",
        "_splitzipext": "Split zip extension from filename and return filename.",
        "abspath": "",
        "exists": "",
        "open": ""
    },
    "nansum": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanmax": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanmin": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanargmax": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanargmin": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanmean": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanmedian": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanpercentile": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanvar": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanstd": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanprod": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nancumsum": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nancumprod": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "nanquantile": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "histogram": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "histogramdd": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "histogram_bin_edges": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__wrapped__": "",
        "_implementation": ""
    },
    "linalg": {
        "LinAlgError": "",
        "cholesky": "",
        "cond": "",
        "det": "",
        "eig": "",
        "eigh": "",
        "eigvals": "",
        "eigvalsh": "",
        "inv": "",
        "lstsq": "",
        "matrix_power": "",
        "matrix_rank": "",
        "multi_dot": "",
        "norm": "",
        "pinv": "",
        "qr": "",
        "slogdet": "",
        "solve": "",
        "svd": "",
        "tensorinv": "",
        "tensorsolve": "",
        "test": ""
    },
    "fft": {
        "fft": "",
        "fft2": "",
        "fftfreq": "",
        "fftn": "",
        "fftshift": "",
        "hfft": "",
        "ifft": "",
        "ifft2": "",
        "ifftn": "",
        "ifftshift": "",
        "ihfft": "",
        "irfft": "",
        "irfft2": "",
        "irfftn": "",
        "rfft": "",
        "rfft2": "",
        "rfftfreq": "",
        "rfftn": "",
        "test": ""
    },
    "random": {
        "BitGenerator": "",
        "Generator": "",
        "MT19937": "",
        "PCG64": "",
        "PCG64DXSM": "",
        "Philox": "",
        "RandomState": "",
        "SFC64": "",
        "SeedSequence": "",
        "__RandomState_ctor": "Return a RandomState instance.",
        "beta": "",
        "binomial": "",
        "bytes": "",
        "chisquare": "",
        "choice": "",
        "default_rng": "Construct a new Generator with the default BitGenerator (PCG64).",
        "dirichlet": "",
        "exponential": "",
        "f": "",
        "gamma": "",
        "geometric": "",
        "get_state": "",
        "gumbel": "",
        "hypergeometric": "",
        "laplace": "",
        "logistic": "",
        "lognormal": "",
        "logseries": "",
        "multinomial": "",
        "multivariate_normal": "",
        "negative_binomial": "",
        "noncentral_chisquare": "",
        "noncentral_f": "",
        "normal": "",
        "pareto": "",
        "permutation": "",
        "poisson": "",
        "power": "",
        "rand": "",
        "randint": "",
        "randn": "",
        "random": "",
        "random_integers": "",
        "random_sample": "",
        "ranf": "",
        "rayleigh": "",
        "sample": "",
        "seed": "",
        "set_state": "",
        "shuffle": "",
        "standard_cauchy": "",
        "standard_exponential": "",
        "standard_gamma": "",
        "standard_normal": "",
        "standard_t": "",
        "test": "",
        "triangular": "",
        "uniform": "",
        "vonmises": "",
        "wald": "",
        "weibull": "",
        "zipf": ""
    },
    "ctypeslib": {
        "_concrete_ndptr": "",
        "_ctype_ndarray": " Create an ndarray of the given element type and shape ",
        "_dtype": "dtype(dtype, align=False, copy=False)",
        "_get_scalar_type_map": "",
        "as_array": "",
        "as_ctypes": "Create and return a ctypes object from a numpy array.  Actually",
        "as_ctypes_type": "",
        "asarray": "asarray(a, dtype=None, order=None, *, like=None)",
        "frombuffer": "frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None)",
        "integer": "Abstract base class of all integer scalar types.",
        "load_library": "",
        "ndarray": "ndarray(shape, dtype=float, buffer=None, offset=0,",
        "ndpointer": ""
    },
    "ma": {
        "MAError": "",
        "MaskError": "",
        "MaskType": "Boolean type (True or False), stored as a byte.",
        "MaskedArray": "",
        "abs": "absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "absolute": "absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "add": "add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "all": "    all(self, axis=None, out=None, keepdims=<no value>)",
        "allclose": "",
        "allequal": "",
        "alltrue": "",
        "amax": "",
        "amin": "",
        "angle": "",
        "anom": "    anom(self, axis=None, dtype=None)",
        "anomalies": "    anom(self, axis=None, dtype=None)",
        "any": "    any(self, axis=None, out=None, keepdims=<no value>)",
        "append": "Append values to the end of an array.",
        "apply_along_axis": "",
        "apply_over_axes": "",
        "arange": "arange([start,] stop[, step,], dtype=None, *, like=None)",
        "arccos": "arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arccosh": "arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arcsin": "arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arcsinh": "arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arctan": "arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arctan2": "arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arctanh": "arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "argmax": "    argmax(self, axis=None, fill_value=None, out=None)",
        "argmin": "    argmin(self, axis=None, fill_value=None, out=None)",
        "argsort": "",
        "around": "",
        "array": "",
        "asanyarray": "",
        "asarray": "",
        "atleast_1d": "atleast_1d(*args, **kwargs)",
        "atleast_2d": "atleast_2d(*args, **kwargs)",
        "atleast_3d": "atleast_3d(*args, **kwargs)",
        "average": "",
        "bitwise_and": "bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "bitwise_or": "bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "bitwise_xor": "bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "bool_": "Boolean type (True or False), stored as a byte.",
        "ceil": "ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "choose": "",
        "clip": "",
        "clump_masked": "",
        "clump_unmasked": "",
        "column_stack": "column_stack(*args, **kwargs)",
        "common_fill_value": "",
        "compress": "    compress(self, condition, axis=None, out=None)",
        "compress_cols": "",
        "compress_nd": "Suppress slices from multiple dimensions which contain masked values.",
        "compress_rowcols": "",
        "compress_rows": "",
        "compressed": "",
        "concatenate": "",
        "conjugate": "conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "convolve": "",
        "copy": "    copy(self, *args, **params)",
        "corrcoef": "",
        "correlate": "",
        "cos": "cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "cosh": "cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "count": "    count(self, axis=None, keepdims=<no value>)",
        "count_masked": "",
        "cov": "",
        "cumprod": "    cumprod(self, axis=None, dtype=None, out=None)",
        "cumsum": "    cumsum(self, axis=None, dtype=None, out=None)",
        "default_fill_value": "",
        "diag": "",
        "diagflat": "diagflat(*args, **kwargs)",
        "diagonal": "    diagonal(self, *args, **params)",
        "diff": "",
        "divide": "true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "dot": "",
        "dstack": "dstack(*args, **kwargs)",
        "ediff1d": "",
        "empty": "empty(shape, dtype=float, order='C', *, like=None)",
        "empty_like": "empty_like(*args, **kwargs)",
        "equal": "equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "exp": "exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "expand_dims": "",
        "fabs": "fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "filled": "",
        "fix_invalid": "",
        "flatnotmasked_contiguous": "",
        "flatnotmasked_edges": "",
        "flatten_mask": "",
        "flatten_structured_array": "",
        "floor": "floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "floor_divide": "floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "fmod": "fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "frombuffer": "frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None)",
        "fromflex": "",
        "fromfunction": "fromfunction(function, shape, **dtype)",
        "getdata": "",
        "getmask": "",
        "getmaskarray": "",
        "greater": "greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "greater_equal": "greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "harden_mask": "    harden_mask(self)",
        "hsplit": "hsplit(*args, **kwargs)",
        "hstack": "hstack(*args, **kwargs)",
        "hypot": "hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "identity": "identity(n, dtype=None)",
        "ids": "    ids(self)",
        "in1d": "",
        "indices": "",
        "inner": "inner(a, b)",
        "innerproduct": "inner(a, b)",
        "intersect1d": "",
        "isMA": "",
        "isMaskedArray": "",
        "is_mask": "",
        "is_masked": "",
        "isarray": "",
        "isin": "",
        "left_shift": "",
        "less": "less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "less_equal": "less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "log": "log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "log10": "log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "log2": "log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "logical_and": "logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "logical_not": "logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "logical_or": "logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "logical_xor": "logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "make_mask": "",
        "make_mask_descr": "",
        "make_mask_none": "",
        "mask_cols": "",
        "mask_or": "",
        "mask_rowcols": "",
        "mask_rows": "",
        "masked_all": "",
        "masked_all_like": "",
        "masked_array": "",
        "masked_equal": "",
        "masked_greater": "",
        "masked_greater_equal": "",
        "masked_inside": "",
        "masked_invalid": "",
        "masked_less": "",
        "masked_less_equal": "",
        "masked_not_equal": "",
        "masked_object": "",
        "masked_outside": "",
        "masked_values": "",
        "masked_where": "",
        "max": "",
        "maximum": "maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "maximum_fill_value": "",
        "mean": "    mean(self, axis=None, dtype=None, out=None, keepdims=<no value>)",
        "median": "",
        "min": "",
        "minimum": "minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "minimum_fill_value": "",
        "mod": "remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "multiply": "multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "mvoid": "",
        "ndim": "",
        "negative": "negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "nonzero": "    nonzero(self)",
        "not_equal": "not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "notmasked_contiguous": "",
        "notmasked_edges": "",
        "ones": "ones(shape, dtype=None, order='C')",
        "outer": "Compute the outer product of two vectors.",
        "outerproduct": "Compute the outer product of two vectors.",
        "polyfit": "Least squares polynomial fit.",
        "power": "",
        "prod": "    prod(self, axis=None, dtype=None, out=None, keepdims=<no value>)",
        "product": "    prod(self, axis=None, dtype=None, out=None, keepdims=<no value>)",
        "ptp": "",
        "put": "",
        "putmask": "",
        "ravel": "    ravel(self, order='C')",
        "remainder": "remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "repeat": "    repeat(self, *args, **params)",
        "reshape": "",
        "resize": "",
        "right_shift": "",
        "round": "",
        "round_": "",
        "row_stack": "vstack(*args, **kwargs)",
        "set_fill_value": "",
        "setdiff1d": "",
        "setxor1d": "",
        "shape": "",
        "sin": "sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "sinh": "sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "size": "",
        "soften_mask": "    soften_mask(self)",
        "sometrue": "",
        "sort": "",
        "sqrt": "sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "squeeze": "",
        "stack": "stack(*args, **kwargs)",
        "std": "    std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)",
        "subtract": "subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "sum": "    sum(self, axis=None, dtype=None, out=None, keepdims=<no value>)",
        "swapaxes": "    swapaxes(self, *args, **params)",
        "take": "",
        "tan": "tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "tanh": "tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "test": "",
        "trace": "    trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "transpose": "",
        "true_divide": "true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "union1d": "",
        "unique": "",
        "vander": "Generate a Vandermonde matrix.",
        "var": "    var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)",
        "vstack": "vstack(*args, **kwargs)",
        "where": "",
        "zeros": "zeros(shape, dtype=float, order='C', *, like=None)"
    }
}