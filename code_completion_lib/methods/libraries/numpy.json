{
    "ModuleDeprecationWarning": {
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "VisibleDeprecationWarning": {
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "show_config": {},
    "char": {
        "add": "",
        "array": "",
        "array_function_dispatch": "partial(func, *args, **keywords) - new function with partial application",
        "asarray": "",
        "bool_": "Boolean type (True or False), stored as a byte.",
        "capitalize": "",
        "center": "",
        "character": "Abstract base class of all character string scalar types.",
        "chararray": "",
        "compare_chararrays": "compare_chararrays(a, b, cmp_op, rstrip)",
        "count": "",
        "decode": "",
        "encode": "",
        "endswith": "",
        "equal": "",
        "expandtabs": "",
        "find": "",
        "greater": "",
        "greater_equal": "",
        "index": "",
        "int_": "Signed integer type, compatible with Python `int` and C ``long``.",
        "integer": "Abstract base class of all integer scalar types.",
        "isalnum": "",
        "isalpha": "",
        "isdecimal": "",
        "isdigit": "",
        "islower": "",
        "isnumeric": "",
        "isspace": "",
        "istitle": "",
        "isupper": "",
        "join": "",
        "less": "",
        "less_equal": "",
        "ljust": "",
        "lower": "",
        "lstrip": "",
        "mod": "",
        "multiply": "",
        "narray": "array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0,",
        "ndarray": "ndarray(shape, dtype=float, buffer=None, offset=0,",
        "not_equal": "",
        "object_": "Any Python object.",
        "partition": "",
        "replace": "",
        "rfind": "",
        "rindex": "",
        "rjust": "",
        "rpartition": "",
        "rsplit": "",
        "rstrip": "",
        "set_module": "Decorator for overriding __module__ on a function or class.",
        "split": "",
        "splitlines": "",
        "startswith": "",
        "str_len": "",
        "string_": "A byte string.",
        "strip": "",
        "swapcase": "",
        "title": "",
        "translate": "",
        "unicode_": "A unicode string.",
        "upper": "",
        "zfill": ""
    },
    "rec": {
        "Counter": "Dict subclass for counting hashable items.  Sometimes called a bag",
        "array": "",
        "find_duplicate": "Find duplication in a list, return a list of duplicated elements",
        "format_parser": "",
        "fromarrays": "Create a record array from a (flat) list of arrays",
        "fromfile": "Create an array from binary file data",
        "fromrecords": "Create a recarray from a list of records in text form.",
        "fromstring": "Create a record array from binary data",
        "get_printoptions": "",
        "ndarray": "ndarray(shape, dtype=float, buffer=None, offset=0,",
        "nullcontext": "Context manager that does no additional processing.",
        "os_fspath": "Return the file system path representation of the object.",
        "recarray": "Construct an ndarray that allows field access using attributes.",
        "record": "A data-type scalar that allows field access as attribute lookup.",
        "set_module": "Decorator for overriding __module__ on a function or class."
    },
    "memmap": {
        "all": "a.all(axis=None, out=None, keepdims=False, *, where=True)",
        "any": "a.any(axis=None, out=None, keepdims=False, *, where=True)",
        "argmax": "a.argmax(axis=None, out=None)",
        "argmin": "a.argmin(axis=None, out=None)",
        "argpartition": "a.argpartition(kth, axis=-1, kind='introselect', order=None)",
        "argsort": "a.argsort(axis=-1, kind=None, order=None)",
        "astype": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
        "byteswap": "a.byteswap(inplace=False)",
        "choose": "a.choose(choices, out=None, mode='raise')",
        "clip": "a.clip(min=None, max=None, out=None, **kwargs)",
        "compress": "a.compress(condition, axis=None, out=None)",
        "conj": "a.conj()",
        "conjugate": "a.conjugate()",
        "copy": "a.copy(order='C')",
        "cumprod": "a.cumprod(axis=None, dtype=None, out=None)",
        "cumsum": "a.cumsum(axis=None, dtype=None, out=None)",
        "diagonal": "a.diagonal(offset=0, axis1=0, axis2=1)",
        "dot": "a.dot(b, out=None)",
        "dump": "a.dump(file)",
        "dumps": "a.dumps()",
        "fill": "a.fill(value)",
        "flatten": "a.flatten(order='C')",
        "flush": "",
        "getfield": "a.getfield(dtype, offset=0)",
        "item": "a.item(*args)",
        "itemset": "a.itemset(*args)",
        "max": "a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "mean": "a.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
        "min": "a.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "newbyteorder": "arr.newbyteorder(new_order='S', /)",
        "nonzero": "a.nonzero()",
        "partition": "a.partition(kth, axis=-1, kind='introselect', order=None)",
        "prod": "a.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
        "ptp": "a.ptp(axis=None, out=None, keepdims=False)",
        "put": "a.put(indices, values, mode='raise')",
        "ravel": "a.ravel([order])",
        "repeat": "a.repeat(repeats, axis=None)",
        "reshape": "a.reshape(shape, order='C')",
        "resize": "a.resize(new_shape, refcheck=True)",
        "round": "a.round(decimals=0, out=None)",
        "searchsorted": "a.searchsorted(v, side='left', sorter=None)",
        "setfield": "a.setfield(val, dtype, offset=0)",
        "setflags": "a.setflags(write=None, align=None, uic=None)",
        "sort": "a.sort(axis=-1, kind=None, order=None)",
        "squeeze": "a.squeeze(axis=None)",
        "std": "a.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "sum": "a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
        "swapaxes": "a.swapaxes(axis1, axis2)",
        "take": "a.take(indices, axis=None, out=None, mode='raise')",
        "tobytes": "a.tobytes(order='C')",
        "tofile": "a.tofile(fid, sep=\"\", format=\"%s\")",
        "tolist": "a.tolist()",
        "tostring": "a.tostring(order='C')",
        "trace": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "transpose": "a.transpose(*axes)",
        "var": "a.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "view": "a.view([dtype][, type])"
    },
    "newaxis": {},
    "ndarray": {
        "all": "a.all(axis=None, out=None, keepdims=False, *, where=True)",
        "any": "a.any(axis=None, out=None, keepdims=False, *, where=True)",
        "argmax": "a.argmax(axis=None, out=None)",
        "argmin": "a.argmin(axis=None, out=None)",
        "argpartition": "a.argpartition(kth, axis=-1, kind='introselect', order=None)",
        "argsort": "a.argsort(axis=-1, kind=None, order=None)",
        "astype": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
        "byteswap": "a.byteswap(inplace=False)",
        "choose": "a.choose(choices, out=None, mode='raise')",
        "clip": "a.clip(min=None, max=None, out=None, **kwargs)",
        "compress": "a.compress(condition, axis=None, out=None)",
        "conj": "a.conj()",
        "conjugate": "a.conjugate()",
        "copy": "a.copy(order='C')",
        "cumprod": "a.cumprod(axis=None, dtype=None, out=None)",
        "cumsum": "a.cumsum(axis=None, dtype=None, out=None)",
        "diagonal": "a.diagonal(offset=0, axis1=0, axis2=1)",
        "dot": "a.dot(b, out=None)",
        "dump": "a.dump(file)",
        "dumps": "a.dumps()",
        "fill": "a.fill(value)",
        "flatten": "a.flatten(order='C')",
        "getfield": "a.getfield(dtype, offset=0)",
        "item": "a.item(*args)",
        "itemset": "a.itemset(*args)",
        "max": "a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "mean": "a.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
        "min": "a.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "newbyteorder": "arr.newbyteorder(new_order='S', /)",
        "nonzero": "a.nonzero()",
        "partition": "a.partition(kth, axis=-1, kind='introselect', order=None)",
        "prod": "a.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
        "ptp": "a.ptp(axis=None, out=None, keepdims=False)",
        "put": "a.put(indices, values, mode='raise')",
        "ravel": "a.ravel([order])",
        "repeat": "a.repeat(repeats, axis=None)",
        "reshape": "a.reshape(shape, order='C')",
        "resize": "a.resize(new_shape, refcheck=True)",
        "round": "a.round(decimals=0, out=None)",
        "searchsorted": "a.searchsorted(v, side='left', sorter=None)",
        "setfield": "a.setfield(val, dtype, offset=0)",
        "setflags": "a.setflags(write=None, align=None, uic=None)",
        "sort": "a.sort(axis=-1, kind=None, order=None)",
        "squeeze": "a.squeeze(axis=None)",
        "std": "a.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "sum": "a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
        "swapaxes": "a.swapaxes(axis1, axis2)",
        "take": "a.take(indices, axis=None, out=None, mode='raise')",
        "tobytes": "a.tobytes(order='C')",
        "tofile": "a.tofile(fid, sep=\"\", format=\"%s\")",
        "tolist": "a.tolist()",
        "tostring": "a.tostring(order='C')",
        "trace": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "transpose": "a.transpose(*axes)",
        "var": "a.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "view": "a.view([dtype][, type])"
    },
    "flatiter": {
        "copy": "copy()"
    },
    "nditer": {
        "close": "close()",
        "copy": "copy()",
        "debug_print": "debug_print()",
        "enable_external_loop": "enable_external_loop()",
        "iternext": "iternext()",
        "remove_axis": "remove_axis(i)",
        "remove_multi_index": "remove_multi_index()",
        "reset": "reset()"
    },
    "nested_iters": {},
    "ufunc": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arange": {},
    "array": {},
    "asarray": {},
    "asanyarray": {},
    "ascontiguousarray": {},
    "asfortranarray": {},
    "zeros": {},
    "count_nonzero": {},
    "empty": {},
    "broadcast": {
        "reset": "reset()"
    },
    "dtype": {
        "newbyteorder": "newbyteorder(new_order='S', /)"
    },
    "fromstring": {},
    "fromfile": {},
    "frombuffer": {},
    "where": {},
    "argwhere": {},
    "copyto": {},
    "concatenate": {},
    "fastCopyAndTranspose": {},
    "lexsort": {},
    "set_numeric_ops": {},
    "can_cast": {},
    "promote_types": {},
    "min_scalar_type": {},
    "result_type": {},
    "isfortran": {},
    "empty_like": {},
    "zeros_like": {},
    "ones_like": {},
    "correlate": {},
    "convolve": {},
    "inner": {},
    "dot": {},
    "outer": {},
    "vdot": {},
    "roll": {},
    "rollaxis": {},
    "moveaxis": {},
    "cross": {},
    "tensordot": {},
    "little_endian": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "fromiter": {},
    "array_equal": {},
    "array_equiv": {},
    "indices": {},
    "fromfunction": {},
    "isclose": {},
    "isscalar": {},
    "binary_repr": {},
    "base_repr": {},
    "ones": {},
    "identity": {},
    "allclose": {},
    "compare_chararrays": {},
    "putmask": {},
    "flatnonzero": {},
    "Inf": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "inf": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "infty": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "Infinity": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "nan": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "NaN": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "False_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "True_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "bitwise_not": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "CLIP": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "RAISE": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "WRAP": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "MAXDIMS": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "BUFSIZE": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ALLOW_THREADS": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ComplexWarning": {
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "full": {},
    "full_like": {},
    "matmul": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "shares_memory": {},
    "may_share_memory": {},
    "MAY_SHARE_BOUNDS": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "MAY_SHARE_EXACT": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "TooHardError": {
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "AxisError": {
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "alen": {},
    "all": {},
    "alltrue": {},
    "amax": {},
    "amin": {},
    "any": {},
    "argmax": {},
    "argmin": {},
    "argpartition": {},
    "argsort": {},
    "around": {},
    "choose": {},
    "clip": {},
    "compress": {},
    "cumprod": {},
    "cumproduct": {},
    "cumsum": {},
    "diagonal": {},
    "mean": {},
    "ndim": {},
    "nonzero": {},
    "partition": {},
    "prod": {},
    "product": {},
    "ptp": {},
    "put": {},
    "ravel": {},
    "repeat": {},
    "reshape": {},
    "resize": {},
    "round_": {},
    "searchsorted": {},
    "shape": {},
    "size": {},
    "sometrue": {},
    "sort": {},
    "squeeze": {},
    "std": {},
    "sum": {},
    "swapaxes": {},
    "take": {},
    "trace": {},
    "transpose": {},
    "var": {},
    "ERR_CALL": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_DEFAULT": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_IGNORE": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_LOG": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_PRINT": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_RAISE": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ERR_WARN": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "FLOATING_POINT_SUPPORT": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "FPE_DIVIDEBYZERO": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "FPE_INVALID": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "FPE_OVERFLOW": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "FPE_UNDERFLOW": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "NAN": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "NINF": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "NZERO": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "PINF": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "PZERO": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "SHIFT_DIVIDEBYZERO": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "SHIFT_INVALID": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "SHIFT_OVERFLOW": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "SHIFT_UNDERFLOW": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "UFUNC_BUFSIZE_DEFAULT": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "UFUNC_PYVALS_NAME": {
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "partition": "Partition the string into three parts using the given separator.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "title": "Return a version of the string where each word is titlecased.",
        "translate": "Replace each character in the string using the given translation table.",
        "upper": "Return a copy of the string converted to uppercase.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "absolute": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "add": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arccos": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arccosh": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arcsin": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arcsinh": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arctan": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arctan2": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "arctanh": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "bitwise_and": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "bitwise_or": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "bitwise_xor": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "cbrt": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "ceil": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "conj": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "conjugate": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "copysign": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "cos": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "cosh": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "deg2rad": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "degrees": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "divide": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "divmod": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "e": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "equal": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "euler_gamma": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "exp": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "exp2": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "expm1": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "fabs": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "floor": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "floor_divide": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "float_power": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "fmax": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "fmin": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "fmod": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "frexp": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "frompyfunc": {},
    "gcd": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "geterrobj": {},
    "greater": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "greater_equal": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "heaviside": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "hypot": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "invert": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "isfinite": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "isinf": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "isnan": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "isnat": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "lcm": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "ldexp": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "left_shift": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "less": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "less_equal": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "log": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "log10": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "log1p": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "log2": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logaddexp": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logaddexp2": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logical_and": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logical_not": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logical_or": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "logical_xor": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "maximum": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "minimum": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "mod": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "modf": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "multiply": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "negative": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "nextafter": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "not_equal": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "pi": {
        "as_integer_ratio": "Return integer ratio.",
        "conjugate": "Return self, the complex conjugate of any float.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer."
    },
    "positive": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "power": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "rad2deg": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "radians": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "reciprocal": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "remainder": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "right_shift": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "rint": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "seterrobj": {},
    "sign": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "signbit": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "sin": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "sinh": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "spacing": {},
    "sqrt": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "square": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "subtract": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "tan": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "tanh": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "true_divide": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "trunc": {
        "accumulate": "accumulate(array, axis=0, dtype=None, out=None)",
        "at": "at(a, indices, b=None, /)",
        "outer": "outer(A, B, /, **kwargs)",
        "reduce": "reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "reduceat": "reduceat(array, indices, axis=0, dtype=None, out=None)"
    },
    "sctypeDict": {
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "sctypes": {
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "ScalarType": {
        "count": "Return number of occurrences of value.",
        "index": "Return first index of value."
    },
    "obj2sctype": {},
    "cast": {
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "nbytes": {
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "sctype2char": {},
    "maximum_sctype": {},
    "issctype": {},
    "typecodes": {
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "find_common_type": {},
    "issubdtype": {},
    "datetime_data": {},
    "datetime_as_string": {},
    "busday_offset": {},
    "busday_count": {},
    "is_busday": {},
    "busdaycalendar": {},
    "byte": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "ubyte": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "short": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "ushort": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "intp": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uintp": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "longlong": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "ulonglong": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "half": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "half.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "double": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "double.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "longdouble": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "longdouble.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "cfloat": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "cdouble": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "clongdouble": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "void": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "generic": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "number": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "integer": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "inexact": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "signedinteger": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "unsignedinteger": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "floating": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "complexfloating": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "flexible": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "character": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "bool8": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int64": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint64": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "float16": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "half.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "float32": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "single.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "float64": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "double.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "complex64": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "complex128": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "object0": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "bytes0": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "B.capitalize() -> copy of B",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "B.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "decode": "Decode the bytes using the codec registered for encoding.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "endswith": "B.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "B.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a bytes object from a string of hexadecimal numbers.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Create a str of hexadecimal numbers from a bytes object.",
        "index": "B.index(sub[, start[, end]]) -> int",
        "isalnum": "B.isalnum() -> bool",
        "isalpha": "B.isalpha() -> bool",
        "isascii": "B.isascii() -> bool",
        "isdigit": "B.isdigit() -> bool",
        "islower": "B.islower() -> bool",
        "isspace": "B.isspace() -> bool",
        "istitle": "B.istitle() -> bool",
        "isupper": "B.isupper() -> bool",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of bytes objects.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "B.lower() -> copy of B",
        "lstrip": "Strip leading bytes contained in the argument.",
        "maketrans": "Return a translation table useable for the bytes or bytearray translate method.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the bytes into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a bytes object with the given prefix string removed if present.",
        "removesuffix": "Return a bytes object with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "B.rfind(sub[, start[, end]]) -> int",
        "rindex": "B.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the bytes into three parts using the given separator.",
        "rsplit": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "rstrip": "Strip trailing bytes contained in the argument.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "splitlines": "Return a list of the lines in the bytes, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "B.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Strip leading and trailing bytes contained in the argument.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "B.swapcase() -> copy of B",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "B.title() -> copy of B",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Return a copy with each character mapped by the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "B.upper() -> copy of B",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "str0": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the string into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "Return a version of the string where each word is titlecased.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Replace each character in the string using the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "Return a copy of the string converted to uppercase.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "void0": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "datetime64": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "timedelta64": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "Bytes0": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "B.capitalize() -> copy of B",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "B.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "decode": "Decode the bytes using the codec registered for encoding.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "endswith": "B.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "B.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a bytes object from a string of hexadecimal numbers.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Create a str of hexadecimal numbers from a bytes object.",
        "index": "B.index(sub[, start[, end]]) -> int",
        "isalnum": "B.isalnum() -> bool",
        "isalpha": "B.isalpha() -> bool",
        "isascii": "B.isascii() -> bool",
        "isdigit": "B.isdigit() -> bool",
        "islower": "B.islower() -> bool",
        "isspace": "B.isspace() -> bool",
        "istitle": "B.istitle() -> bool",
        "isupper": "B.isupper() -> bool",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of bytes objects.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "B.lower() -> copy of B",
        "lstrip": "Strip leading bytes contained in the argument.",
        "maketrans": "Return a translation table useable for the bytes or bytearray translate method.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the bytes into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a bytes object with the given prefix string removed if present.",
        "removesuffix": "Return a bytes object with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "B.rfind(sub[, start[, end]]) -> int",
        "rindex": "B.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the bytes into three parts using the given separator.",
        "rsplit": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "rstrip": "Strip trailing bytes contained in the argument.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "splitlines": "Return a list of the lines in the bytes, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "B.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Strip leading and trailing bytes contained in the argument.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "B.swapcase() -> copy of B",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "B.title() -> copy of B",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Return a copy with each character mapped by the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "B.upper() -> copy of B",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "Datetime64": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "Str0": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the string into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "Return a version of the string where each word is titlecased.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Replace each character in the string using the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "Return a copy of the string converted to uppercase.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "Uint64": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int32": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint32": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int16": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint16": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int8": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint8": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "complex_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int0": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uint0": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "single": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "single.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "csingle": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "singlecomplex": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "float_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "double.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a floating-point number from a hexadecimal string.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Return a hexadecimal representation of a floating-point number.",
        "is_integer": "Return True if the float is an integer.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "intc": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "uintc": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "int_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "longfloat": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "as_integer_ratio": "longdouble.as_integer_ratio() -> (int, int)",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "clongfloat": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "longcomplex": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "bool_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "bytes_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "B.capitalize() -> copy of B",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "B.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "decode": "Decode the bytes using the codec registered for encoding.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "endswith": "B.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "B.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a bytes object from a string of hexadecimal numbers.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Create a str of hexadecimal numbers from a bytes object.",
        "index": "B.index(sub[, start[, end]]) -> int",
        "isalnum": "B.isalnum() -> bool",
        "isalpha": "B.isalpha() -> bool",
        "isascii": "B.isascii() -> bool",
        "isdigit": "B.isdigit() -> bool",
        "islower": "B.islower() -> bool",
        "isspace": "B.isspace() -> bool",
        "istitle": "B.istitle() -> bool",
        "isupper": "B.isupper() -> bool",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of bytes objects.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "B.lower() -> copy of B",
        "lstrip": "Strip leading bytes contained in the argument.",
        "maketrans": "Return a translation table useable for the bytes or bytearray translate method.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the bytes into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a bytes object with the given prefix string removed if present.",
        "removesuffix": "Return a bytes object with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "B.rfind(sub[, start[, end]]) -> int",
        "rindex": "B.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the bytes into three parts using the given separator.",
        "rsplit": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "rstrip": "Strip trailing bytes contained in the argument.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "splitlines": "Return a list of the lines in the bytes, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "B.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Strip leading and trailing bytes contained in the argument.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "B.swapcase() -> copy of B",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "B.title() -> copy of B",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Return a copy with each character mapped by the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "B.upper() -> copy of B",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "string_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "B.capitalize() -> copy of B",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "B.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "decode": "Decode the bytes using the codec registered for encoding.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "endswith": "B.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "B.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "fromhex": "Create a bytes object from a string of hexadecimal numbers.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "hex": "Create a str of hexadecimal numbers from a bytes object.",
        "index": "B.index(sub[, start[, end]]) -> int",
        "isalnum": "B.isalnum() -> bool",
        "isalpha": "B.isalpha() -> bool",
        "isascii": "B.isascii() -> bool",
        "isdigit": "B.isdigit() -> bool",
        "islower": "B.islower() -> bool",
        "isspace": "B.isspace() -> bool",
        "istitle": "B.istitle() -> bool",
        "isupper": "B.isupper() -> bool",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of bytes objects.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "B.lower() -> copy of B",
        "lstrip": "Strip leading bytes contained in the argument.",
        "maketrans": "Return a translation table useable for the bytes or bytearray translate method.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the bytes into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a bytes object with the given prefix string removed if present.",
        "removesuffix": "Return a bytes object with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "B.rfind(sub[, start[, end]]) -> int",
        "rindex": "B.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the bytes into three parts using the given separator.",
        "rsplit": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "rstrip": "Strip trailing bytes contained in the argument.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the sections in the bytes, using sep as the delimiter.",
        "splitlines": "Return a list of the lines in the bytes, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "B.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Strip leading and trailing bytes contained in the argument.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "B.swapcase() -> copy of B",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "B.title() -> copy of B",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Return a copy with each character mapped by the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "B.upper() -> copy of B",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "str_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the string into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "Return a version of the string where each word is titlecased.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Replace each character in the string using the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "Return a copy of the string converted to uppercase.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "unicode_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "partition": "Partition the string into three parts using the given separator.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "std": "Scalar method identical to the corresponding array attribute.",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "title": "Return a version of the string where each word is titlecased.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "translate": "Replace each character in the string using the given translation table.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "upper": "Return a copy of the string converted to uppercase.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "object_": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "getfield": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setfield": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "array2string": {},
    "array_str": {},
    "array_repr": {},
    "set_string_function": {},
    "set_printoptions": {},
    "get_printoptions": {},
    "printoptions": {},
    "format_float_positional": {},
    "format_float_scientific": {},
    "require": {},
    "seterr": {},
    "geterr": {},
    "setbufsize": {},
    "getbufsize": {},
    "seterrcall": {},
    "geterrcall": {},
    "errstate": {},
    "record": {
        "all": "Scalar method identical to the corresponding array attribute.",
        "any": "Scalar method identical to the corresponding array attribute.",
        "argmax": "Scalar method identical to the corresponding array attribute.",
        "argmin": "Scalar method identical to the corresponding array attribute.",
        "argsort": "Scalar method identical to the corresponding array attribute.",
        "astype": "Scalar method identical to the corresponding array attribute.",
        "byteswap": "Scalar method identical to the corresponding array attribute.",
        "choose": "Scalar method identical to the corresponding array attribute.",
        "clip": "Scalar method identical to the corresponding array attribute.",
        "compress": "Scalar method identical to the corresponding array attribute.",
        "conjugate": "Scalar method identical to the corresponding array attribute.",
        "copy": "Scalar method identical to the corresponding array attribute.",
        "cumprod": "Scalar method identical to the corresponding array attribute.",
        "cumsum": "Scalar method identical to the corresponding array attribute.",
        "diagonal": "Scalar method identical to the corresponding array attribute.",
        "dump": "Scalar method identical to the corresponding array attribute.",
        "dumps": "Scalar method identical to the corresponding array attribute.",
        "fill": "Scalar method identical to the corresponding array attribute.",
        "flatten": "Scalar method identical to the corresponding array attribute.",
        "item": "Scalar method identical to the corresponding array attribute.",
        "itemset": "Scalar method identical to the corresponding array attribute.",
        "max": "Scalar method identical to the corresponding array attribute.",
        "mean": "Scalar method identical to the corresponding array attribute.",
        "min": "Scalar method identical to the corresponding array attribute.",
        "newbyteorder": "newbyteorder(new_order='S', /)",
        "nonzero": "Scalar method identical to the corresponding array attribute.",
        "pprint": "Pretty-print all fields.",
        "prod": "Scalar method identical to the corresponding array attribute.",
        "ptp": "Scalar method identical to the corresponding array attribute.",
        "put": "Scalar method identical to the corresponding array attribute.",
        "ravel": "Scalar method identical to the corresponding array attribute.",
        "repeat": "Scalar method identical to the corresponding array attribute.",
        "reshape": "Scalar method identical to the corresponding array attribute.",
        "resize": "Scalar method identical to the corresponding array attribute.",
        "round": "Scalar method identical to the corresponding array attribute.",
        "searchsorted": "Scalar method identical to the corresponding array attribute.",
        "setflags": "Scalar method identical to the corresponding array attribute.",
        "sort": "Scalar method identical to the corresponding array attribute.",
        "squeeze": "Scalar method identical to the corresponding array attribute.",
        "std": "Scalar method identical to the corresponding array attribute.",
        "sum": "Scalar method identical to the corresponding array attribute.",
        "swapaxes": "Scalar method identical to the corresponding array attribute.",
        "take": "Scalar method identical to the corresponding array attribute.",
        "tofile": "Scalar method identical to the corresponding array attribute.",
        "tolist": "Scalar method identical to the corresponding array attribute.",
        "tostring": "Scalar method identical to the corresponding array attribute.",
        "trace": "Scalar method identical to the corresponding array attribute.",
        "transpose": "Scalar method identical to the corresponding array attribute.",
        "var": "Scalar method identical to the corresponding array attribute.",
        "view": "Scalar method identical to the corresponding array attribute."
    },
    "recarray": {
        "all": "a.all(axis=None, out=None, keepdims=False, *, where=True)",
        "any": "a.any(axis=None, out=None, keepdims=False, *, where=True)",
        "argmax": "a.argmax(axis=None, out=None)",
        "argmin": "a.argmin(axis=None, out=None)",
        "argpartition": "a.argpartition(kth, axis=-1, kind='introselect', order=None)",
        "argsort": "a.argsort(axis=-1, kind=None, order=None)",
        "astype": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
        "byteswap": "a.byteswap(inplace=False)",
        "choose": "a.choose(choices, out=None, mode='raise')",
        "clip": "a.clip(min=None, max=None, out=None, **kwargs)",
        "compress": "a.compress(condition, axis=None, out=None)",
        "conj": "a.conj()",
        "conjugate": "a.conjugate()",
        "copy": "a.copy(order='C')",
        "cumprod": "a.cumprod(axis=None, dtype=None, out=None)",
        "cumsum": "a.cumsum(axis=None, dtype=None, out=None)",
        "diagonal": "a.diagonal(offset=0, axis1=0, axis2=1)",
        "dot": "a.dot(b, out=None)",
        "dump": "a.dump(file)",
        "dumps": "a.dumps()",
        "fill": "a.fill(value)",
        "flatten": "a.flatten(order='C')",
        "getfield": "a.getfield(dtype, offset=0)",
        "item": "a.item(*args)",
        "itemset": "a.itemset(*args)",
        "max": "a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "mean": "a.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
        "min": "a.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "newbyteorder": "arr.newbyteorder(new_order='S', /)",
        "nonzero": "a.nonzero()",
        "partition": "a.partition(kth, axis=-1, kind='introselect', order=None)",
        "prod": "a.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
        "ptp": "a.ptp(axis=None, out=None, keepdims=False)",
        "put": "a.put(indices, values, mode='raise')",
        "ravel": "a.ravel([order])",
        "repeat": "a.repeat(repeats, axis=None)",
        "reshape": "a.reshape(shape, order='C')",
        "resize": "a.resize(new_shape, refcheck=True)",
        "round": "a.round(decimals=0, out=None)",
        "searchsorted": "a.searchsorted(v, side='left', sorter=None)",
        "setfield": "a.setfield(val, dtype, offset=0)",
        "setflags": "a.setflags(write=None, align=None, uic=None)",
        "sort": "a.sort(axis=-1, kind=None, order=None)",
        "squeeze": "a.squeeze(axis=None)",
        "std": "a.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "sum": "a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
        "swapaxes": "a.swapaxes(axis1, axis2)",
        "take": "a.take(indices, axis=None, out=None, mode='raise')",
        "tobytes": "a.tobytes(order='C')",
        "tofile": "a.tofile(fid, sep=\"\", format=\"%s\")",
        "tolist": "a.tolist()",
        "tostring": "a.tostring(order='C')",
        "trace": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "transpose": "a.transpose(*axes)",
        "var": "a.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "view": "a.view([dtype][, type])"
    },
    "format_parser": {},
    "chararray": {
        "all": "a.all(axis=None, out=None, keepdims=False, *, where=True)",
        "any": "a.any(axis=None, out=None, keepdims=False, *, where=True)",
        "argmax": "a.argmax(axis=None, out=None)",
        "argmin": "a.argmin(axis=None, out=None)",
        "argpartition": "a.argpartition(kth, axis=-1, kind='introselect', order=None)",
        "astype": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
        "byteswap": "a.byteswap(inplace=False)",
        "capitalize": "",
        "center": "",
        "choose": "a.choose(choices, out=None, mode='raise')",
        "clip": "a.clip(min=None, max=None, out=None, **kwargs)",
        "compress": "a.compress(condition, axis=None, out=None)",
        "conj": "a.conj()",
        "conjugate": "a.conjugate()",
        "copy": "a.copy(order='C')",
        "count": "",
        "cumprod": "a.cumprod(axis=None, dtype=None, out=None)",
        "cumsum": "a.cumsum(axis=None, dtype=None, out=None)",
        "decode": "",
        "diagonal": "a.diagonal(offset=0, axis1=0, axis2=1)",
        "dot": "a.dot(b, out=None)",
        "dump": "a.dump(file)",
        "dumps": "a.dumps()",
        "encode": "",
        "endswith": "",
        "expandtabs": "",
        "fill": "a.fill(value)",
        "find": "",
        "flatten": "a.flatten(order='C')",
        "getfield": "a.getfield(dtype, offset=0)",
        "index": "",
        "isalnum": "",
        "isalpha": "",
        "isdecimal": "",
        "isdigit": "",
        "islower": "",
        "isnumeric": "",
        "isspace": "",
        "istitle": "",
        "isupper": "",
        "item": "a.item(*args)",
        "itemset": "a.itemset(*args)",
        "join": "",
        "ljust": "",
        "lower": "",
        "lstrip": "",
        "max": "a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "mean": "a.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
        "min": "a.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
        "newbyteorder": "arr.newbyteorder(new_order='S', /)",
        "nonzero": "a.nonzero()",
        "partition": "",
        "prod": "a.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
        "ptp": "a.ptp(axis=None, out=None, keepdims=False)",
        "put": "a.put(indices, values, mode='raise')",
        "ravel": "a.ravel([order])",
        "repeat": "a.repeat(repeats, axis=None)",
        "replace": "",
        "reshape": "a.reshape(shape, order='C')",
        "resize": "a.resize(new_shape, refcheck=True)",
        "rfind": "",
        "rindex": "",
        "rjust": "",
        "round": "a.round(decimals=0, out=None)",
        "rpartition": "",
        "rsplit": "",
        "rstrip": "",
        "searchsorted": "a.searchsorted(v, side='left', sorter=None)",
        "setfield": "a.setfield(val, dtype, offset=0)",
        "setflags": "a.setflags(write=None, align=None, uic=None)",
        "sort": "a.sort(axis=-1, kind=None, order=None)",
        "split": "",
        "splitlines": "",
        "squeeze": "a.squeeze(axis=None)",
        "startswith": "",
        "std": "a.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "strip": "",
        "sum": "a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
        "swapaxes": "a.swapaxes(axis1, axis2)",
        "swapcase": "",
        "take": "a.take(indices, axis=None, out=None, mode='raise')",
        "title": "",
        "tobytes": "a.tobytes(order='C')",
        "tofile": "a.tofile(fid, sep=\"\", format=\"%s\")",
        "tolist": "a.tolist()",
        "tostring": "a.tostring(order='C')",
        "trace": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "translate": "",
        "transpose": "a.transpose(*axes)",
        "upper": "",
        "var": "a.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
        "view": "a.view([dtype][, type])",
        "zfill": ""
    },
    "logspace": {},
    "linspace": {},
    "geomspace": {},
    "MachAr": {},
    "finfo": {},
    "iinfo": {},
    "atleast_1d": {},
    "atleast_2d": {},
    "atleast_3d": {},
    "block": {},
    "hstack": {},
    "stack": {},
    "vstack": {},
    "einsum": {},
    "einsum_path": {},
    "matrix": {
        "all": "",
        "any": "",
        "argmax": "",
        "argmin": "",
        "argpartition": "a.argpartition(kth, axis=-1, kind='introselect', order=None)",
        "argsort": "a.argsort(axis=-1, kind=None, order=None)",
        "astype": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
        "byteswap": "a.byteswap(inplace=False)",
        "choose": "a.choose(choices, out=None, mode='raise')",
        "clip": "a.clip(min=None, max=None, out=None, **kwargs)",
        "compress": "a.compress(condition, axis=None, out=None)",
        "conj": "a.conj()",
        "conjugate": "a.conjugate()",
        "copy": "a.copy(order='C')",
        "cumprod": "a.cumprod(axis=None, dtype=None, out=None)",
        "cumsum": "a.cumsum(axis=None, dtype=None, out=None)",
        "diagonal": "a.diagonal(offset=0, axis1=0, axis2=1)",
        "dot": "a.dot(b, out=None)",
        "dump": "a.dump(file)",
        "dumps": "a.dumps()",
        "fill": "a.fill(value)",
        "flatten": "",
        "getA": "",
        "getA1": "",
        "getH": "",
        "getI": "",
        "getT": "",
        "getfield": "a.getfield(dtype, offset=0)",
        "item": "a.item(*args)",
        "itemset": "a.itemset(*args)",
        "max": "",
        "mean": "",
        "min": "",
        "newbyteorder": "arr.newbyteorder(new_order='S', /)",
        "nonzero": "a.nonzero()",
        "partition": "a.partition(kth, axis=-1, kind='introselect', order=None)",
        "prod": "",
        "ptp": "",
        "put": "a.put(indices, values, mode='raise')",
        "ravel": "",
        "repeat": "a.repeat(repeats, axis=None)",
        "reshape": "a.reshape(shape, order='C')",
        "resize": "a.resize(new_shape, refcheck=True)",
        "round": "a.round(decimals=0, out=None)",
        "searchsorted": "a.searchsorted(v, side='left', sorter=None)",
        "setfield": "a.setfield(val, dtype, offset=0)",
        "setflags": "a.setflags(write=None, align=None, uic=None)",
        "sort": "a.sort(axis=-1, kind=None, order=None)",
        "squeeze": "",
        "std": "",
        "sum": "",
        "swapaxes": "a.swapaxes(axis1, axis2)",
        "take": "a.take(indices, axis=None, out=None, mode='raise')",
        "tobytes": "a.tobytes(order='C')",
        "tofile": "a.tofile(fid, sep=\"\", format=\"%s\")",
        "tolist": "",
        "tostring": "a.tostring(order='C')",
        "trace": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "transpose": "a.transpose(*axes)",
        "var": "",
        "view": "a.view([dtype][, type])"
    },
    "bmat": {},
    "mat": {},
    "asmatrix": {},
    "emath": {
        "any": "",
        "arccos": "",
        "arcsin": "",
        "arctanh": "",
        "array_function_dispatch": "Decorator for adding dispatch with the __array_function__ protocol.",
        "asarray": "asarray(a, dtype=None, order=None, *, like=None)",
        "isreal": "",
        "log": "",
        "log10": "",
        "log2": "",
        "logn": "",
        "power": "",
        "sqrt": ""
    },
    "math": {
        "acos": "Return the arc cosine (measured in radians) of x.",
        "acosh": "Return the inverse hyperbolic cosine of x.",
        "asin": "Return the arc sine (measured in radians) of x.",
        "asinh": "Return the inverse hyperbolic sine of x.",
        "atan": "Return the arc tangent (measured in radians) of x.",
        "atan2": "Return the arc tangent (measured in radians) of y/x.",
        "atanh": "Return the inverse hyperbolic tangent of x.",
        "ceil": "Return the ceiling of x as an Integral.",
        "comb": "Number of ways to choose k items from n items without repetition and without order.",
        "copysign": "Return a float with the magnitude (absolute value) of x but the sign of y.",
        "cos": "Return the cosine of x (measured in radians).",
        "cosh": "Return the hyperbolic cosine of x.",
        "degrees": "Convert angle x from radians to degrees.",
        "dist": "Return the Euclidean distance between two points p and q.",
        "erf": "Error function at x.",
        "erfc": "Complementary error function at x.",
        "exp": "Return e raised to the power of x.",
        "expm1": "Return exp(x)-1.",
        "fabs": "Return the absolute value of the float x.",
        "factorial": "Find x!.",
        "floor": "Return the floor of x as an Integral.",
        "fmod": "Return fmod(x, y), according to platform C.",
        "frexp": "Return the mantissa and exponent of x, as pair (m, e).",
        "fsum": "Return an accurate floating point sum of values in the iterable seq.",
        "gamma": "Gamma function at x.",
        "gcd": "Greatest Common Divisor.",
        "hypot": "hypot(*coordinates) -> value",
        "isclose": "Determine whether two floating point numbers are close in value.",
        "isfinite": "Return True if x is neither an infinity nor a NaN, and False otherwise.",
        "isinf": "Return True if x is a positive or negative infinity, and False otherwise.",
        "isnan": "Return True if x is a NaN (not a number), and False otherwise.",
        "isqrt": "Return the integer part of the square root of the input.",
        "lcm": "Least Common Multiple.",
        "ldexp": "Return x * (2**i).",
        "lgamma": "Natural logarithm of absolute value of Gamma function at x.",
        "log": "log(x, [base=math.e])",
        "log10": "Return the base 10 logarithm of x.",
        "log1p": "Return the natural logarithm of 1+x (base e).",
        "log2": "Return the base 2 logarithm of x.",
        "modf": "Return the fractional and integer parts of x.",
        "nextafter": "Return the next floating-point value after x towards y.",
        "perm": "Number of ways to choose k items from n items without repetition and with order.",
        "pow": "Return x**y (x to the power of y).",
        "prod": "Calculate the product of all the elements in the input iterable.",
        "radians": "Convert angle x from degrees to radians.",
        "remainder": "Difference between x and the closest integer multiple of y.",
        "sin": "Return the sine of x (measured in radians).",
        "sinh": "Return the hyperbolic sine of x.",
        "sqrt": "Return the square root of x.",
        "tan": "Return the tangent of x (measured in radians).",
        "tanh": "Return the hyperbolic tangent of x.",
        "trunc": "Truncates the Real x to the nearest Integral toward 0.",
        "ulp": "Return the value of the least significant bit of the float x."
    },
    "tracemalloc_domain": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "iscomplexobj": {},
    "isrealobj": {},
    "imag": {},
    "iscomplex": {},
    "isreal": {},
    "nan_to_num": {},
    "real": {},
    "real_if_close": {},
    "typename": {},
    "asfarray": {},
    "mintypecode": {},
    "asscalar": {},
    "common_type": {},
    "ravel_multi_index": {},
    "unravel_index": {},
    "mgrid": {},
    "ogrid": {},
    "r_": {
        "concatenate": "",
        "makemat": ""
    },
    "c_": {
        "concatenate": "",
        "makemat": ""
    },
    "s_": {},
    "index_exp": {},
    "ix_": {},
    "ndenumerate": {},
    "ndindex": {
        "ndincr": ""
    },
    "fill_diagonal": {},
    "diag_indices": {},
    "diag_indices_from": {},
    "select": {},
    "piecewise": {},
    "trim_zeros": {},
    "copy": {},
    "iterable": {},
    "percentile": {},
    "diff": {},
    "gradient": {},
    "angle": {},
    "unwrap": {},
    "sort_complex": {},
    "disp": {},
    "flip": {},
    "rot90": {},
    "extract": {},
    "place": {},
    "vectorize": {},
    "asarray_chkfinite": {},
    "average": {},
    "bincount": {},
    "digitize": {},
    "cov": {},
    "corrcoef": {},
    "msort": {},
    "median": {},
    "sinc": {},
    "hamming": {},
    "hanning": {},
    "bartlett": {},
    "blackman": {},
    "kaiser": {},
    "trapz": {},
    "i0": {},
    "add_newdoc": {},
    "add_docstring": {},
    "meshgrid": {},
    "delete": {},
    "insert": {},
    "append": {},
    "interp": {},
    "add_newdoc_ufunc": {},
    "quantile": {},
    "column_stack": {},
    "row_stack": {},
    "dstack": {},
    "array_split": {},
    "split": {},
    "hsplit": {},
    "vsplit": {},
    "dsplit": {},
    "apply_over_axes": {},
    "expand_dims": {},
    "apply_along_axis": {},
    "kron": {},
    "tile": {},
    "get_array_wrap": {},
    "take_along_axis": {},
    "put_along_axis": {},
    "broadcast_to": {},
    "broadcast_arrays": {},
    "broadcast_shapes": {},
    "diag": {},
    "diagflat": {},
    "eye": {},
    "fliplr": {},
    "flipud": {},
    "tri": {},
    "triu": {},
    "tril": {},
    "vander": {},
    "histogram2d": {},
    "mask_indices": {},
    "tril_indices": {},
    "tril_indices_from": {},
    "triu_indices": {},
    "triu_indices_from": {},
    "fix": {},
    "isneginf": {},
    "isposinf": {},
    "pad": {},
    "poly": {},
    "roots": {},
    "polyint": {},
    "polyder": {},
    "polyadd": {},
    "polysub": {},
    "polymul": {},
    "polydiv": {},
    "polyval": {},
    "poly1d": {
        "deriv": "",
        "integ": ""
    },
    "polyfit": {},
    "RankWarning": {
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "issubclass_": {},
    "issubsctype": {},
    "deprecate": {},
    "deprecate_with_doc": {},
    "get_include": {},
    "info": {},
    "source": {},
    "who": {},
    "lookfor": {},
    "byte_bounds": {},
    "safe_eval": {},
    "ediff1d": {},
    "intersect1d": {},
    "setxor1d": {},
    "union1d": {},
    "setdiff1d": {},
    "unique": {},
    "in1d": {},
    "isin": {},
    "savetxt": {},
    "loadtxt": {},
    "genfromtxt": {},
    "ndfromtxt": {},
    "mafromtxt": {},
    "recfromtxt": {},
    "recfromcsv": {},
    "load": {},
    "loads": {},
    "save": {},
    "savez": {},
    "savez_compressed": {},
    "packbits": {},
    "unpackbits": {},
    "fromregex": {},
    "DataSource": {
        "abspath": "",
        "exists": "",
        "open": ""
    },
    "nansum": {},
    "nanmax": {},
    "nanmin": {},
    "nanargmax": {},
    "nanargmin": {},
    "nanmean": {},
    "nanmedian": {},
    "nanpercentile": {},
    "nanvar": {},
    "nanstd": {},
    "nanprod": {},
    "nancumsum": {},
    "nancumprod": {},
    "nanquantile": {},
    "histogram": {},
    "histogramdd": {},
    "histogram_bin_edges": {},
    "linalg": {
        "LinAlgError": "",
        "LinAlgWarning": "",
        "bandwidth": "bandwidth(a)",
        "block_diag": "",
        "cdf2rdf": "",
        "cho_factor": "",
        "cho_solve": "Solve the linear equations A x = b, given the Cholesky factorization of A.",
        "cho_solve_banded": "",
        "cholesky": "",
        "cholesky_banded": "",
        "circulant": "",
        "clarkson_woodruff_transform": "",
        "companion": "",
        "convolution_matrix": "",
        "coshm": "",
        "cosm": "",
        "cossin": "",
        "det": "",
        "dft": "",
        "diagsvd": "",
        "eig": "",
        "eig_banded": "",
        "eigh": "",
        "eigh_tridiagonal": "",
        "eigvals": "",
        "eigvals_banded": "",
        "eigvalsh": "",
        "eigvalsh_tridiagonal": "",
        "expm": "Compute the matrix exponential of an array.",
        "expm_cond": "",
        "expm_frechet": "",
        "fiedler": "Returns a symmetric Fiedler matrix",
        "fiedler_companion": " Returns a Fiedler companion matrix",
        "find_best_blas_type": "Find best-matching BLAS/LAPACK type.",
        "fractional_matrix_power": "",
        "funm": "",
        "get_blas_funcs": "Return available BLAS function objects from names.",
        "get_lapack_funcs": "Return available LAPACK function objects from names.",
        "hadamard": "",
        "hankel": "",
        "helmert": "",
        "hessenberg": "",
        "hilbert": "",
        "inv": "",
        "invhilbert": "",
        "invpascal": "",
        "ishermitian": "ishermitian(a, atol=None, rtol=None)",
        "issymmetric": "issymmetric(a, atol=None, rtol=None)",
        "khatri_rao": "",
        "kron": "",
        "ldl": " Computes the LDLt or Bunch-Kaufman factorization of a symmetric/",
        "leslie": "",
        "logm": "",
        "lstsq": "",
        "lu": "",
        "lu_factor": "",
        "lu_solve": "Solve an equation system, a x = b, given the LU factorization of a",
        "matmul_toeplitz": "Efficient Toeplitz Matrix-Matrix Multiplication using FFT",
        "matrix_balance": "",
        "norm": "",
        "null_space": "",
        "ordqz": "QZ decomposition for a pair of matrices with reordering.",
        "orth": "",
        "orthogonal_procrustes": "",
        "pascal": "",
        "pinv": "",
        "pinvh": "",
        "polar": "",
        "qr": "",
        "qr_delete": "qr_delete(Q, R, k, int p=1, which=u'row', overwrite_qr=False, check_finite=True)",
        "qr_insert": "qr_insert(Q, R, u, k, which=u'row', rcond=None, overwrite_qru=False, check_finite=True)",
        "qr_multiply": "",
        "qr_update": "qr_update(Q, R, u, v, overwrite_qruv=False, check_finite=True)",
        "qz": "",
        "rq": "",
        "rsf2csf": "",
        "schur": "",
        "signm": "",
        "sinhm": "",
        "sinm": "",
        "solve": "",
        "solve_banded": "",
        "solve_circulant": "Solve C x = b for x, where C is a circulant matrix.",
        "solve_continuous_are": "",
        "solve_continuous_lyapunov": "",
        "solve_discrete_are": "",
        "solve_discrete_lyapunov": "",
        "solve_lyapunov": "",
        "solve_sylvester": "",
        "solve_toeplitz": "Solve a Toeplitz system using Levinson Recursion",
        "solve_triangular": "",
        "solveh_banded": "",
        "sqrtm": "",
        "subspace_angles": "",
        "svd": "",
        "svdvals": "",
        "tanhm": "",
        "tanm": "",
        "test": "",
        "toeplitz": "",
        "tri": "",
        "tril": "",
        "triu": ""
    },
    "fft": {
        "dct": "Return the Discrete Cosine Transform of arbitrary type sequence x.",
        "dctn": "",
        "dst": "",
        "dstn": "",
        "fft": "",
        "fft2": "",
        "fftfreq": "",
        "fftn": "",
        "fftshift": "",
        "fht": "Compute the fast Hankel transform.",
        "fhtoffset": "Return optimal offset for a fast Hankel transform.",
        "get_workers": "Returns the default number of workers within the current context",
        "hfft": "",
        "hfft2": "",
        "hfftn": "",
        "idct": "",
        "idctn": "",
        "idst": "",
        "idstn": "",
        "ifft": "",
        "ifft2": "",
        "ifftn": "",
        "ifftshift": "",
        "ifht": "Compute the inverse fast Hankel transform.",
        "ihfft": "",
        "ihfft2": "",
        "ihfftn": "",
        "irfft": "",
        "irfft2": "",
        "irfftn": "",
        "next_fast_len": "Find the next fast size of input data to ``fft``, for zero-padding, etc.",
        "register_backend": "",
        "rfft": "",
        "rfft2": "",
        "rfftfreq": "",
        "rfftn": "",
        "set_backend": "Context manager to set the backend within a fixed scope.",
        "set_global_backend": "Sets the global fft backend",
        "set_workers": "Context manager for the default number of workers used in `scipy.fft`",
        "skip_backend": "Context manager to skip a backend within a fixed scope.",
        "test": ""
    },
    "random": {},
    "ctypeslib": {
        "as_array": "",
        "as_ctypes": "Create and return a ctypes object from a numpy array.  Actually",
        "as_ctypes_type": "",
        "asarray": "asarray(a, dtype=None, order=None, *, like=None)",
        "frombuffer": "frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None)",
        "integer": "Abstract base class of all integer scalar types.",
        "load_library": "",
        "ndarray": "ndarray(shape, dtype=float, buffer=None, offset=0,",
        "ndpointer": ""
    },
    "ma": {
        "MAError": "",
        "MaskError": "",
        "MaskType": "Boolean type (True or False), stored as a byte.",
        "MaskedArray": "",
        "abs": "absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "absolute": "absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "add": "add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "all": "    all(self, axis=None, out=None, keepdims=<no value>)",
        "allclose": "",
        "allequal": "",
        "alltrue": "",
        "amax": "",
        "amin": "",
        "angle": "",
        "anom": "    anom(self, axis=None, dtype=None)",
        "anomalies": "    anom(self, axis=None, dtype=None)",
        "any": "    any(self, axis=None, out=None, keepdims=<no value>)",
        "append": "Append values to the end of an array.",
        "apply_along_axis": "",
        "apply_over_axes": "",
        "arange": "arange([start,] stop[, step,], dtype=None, *, like=None)",
        "arccos": "arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arccosh": "arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arcsin": "arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arcsinh": "arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arctan": "arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arctan2": "arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "arctanh": "arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "argmax": "    argmax(self, axis=None, fill_value=None, out=None)",
        "argmin": "    argmin(self, axis=None, fill_value=None, out=None)",
        "argsort": "",
        "around": "",
        "array": "",
        "asanyarray": "",
        "asarray": "",
        "atleast_1d": "atleast_1d(*args, **kwargs)",
        "atleast_2d": "atleast_2d(*args, **kwargs)",
        "atleast_3d": "atleast_3d(*args, **kwargs)",
        "average": "",
        "bitwise_and": "bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "bitwise_or": "bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "bitwise_xor": "bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "bool_": "Boolean type (True or False), stored as a byte.",
        "ceil": "ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "choose": "",
        "clip": "",
        "clump_masked": "",
        "clump_unmasked": "",
        "column_stack": "column_stack(*args, **kwargs)",
        "common_fill_value": "",
        "compress": "    compress(self, condition, axis=None, out=None)",
        "compress_cols": "",
        "compress_nd": "Suppress slices from multiple dimensions which contain masked values.",
        "compress_rowcols": "",
        "compress_rows": "",
        "compressed": "",
        "concatenate": "",
        "conjugate": "conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "convolve": "",
        "copy": "    copy(self, *args, **params)",
        "corrcoef": "",
        "correlate": "",
        "cos": "cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "cosh": "cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "count": "    count(self, axis=None, keepdims=<no value>)",
        "count_masked": "",
        "cov": "",
        "cumprod": "    cumprod(self, axis=None, dtype=None, out=None)",
        "cumsum": "    cumsum(self, axis=None, dtype=None, out=None)",
        "default_fill_value": "",
        "diag": "",
        "diagflat": "diagflat(*args, **kwargs)",
        "diagonal": "    diagonal(self, *args, **params)",
        "diff": "",
        "divide": "true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "dot": "",
        "dstack": "dstack(*args, **kwargs)",
        "ediff1d": "",
        "empty": "empty(shape, dtype=float, order='C', *, like=None)",
        "empty_like": "empty_like(*args, **kwargs)",
        "equal": "equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "exp": "exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "expand_dims": "",
        "fabs": "fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "filled": "",
        "fix_invalid": "",
        "flatnotmasked_contiguous": "",
        "flatnotmasked_edges": "",
        "flatten_mask": "",
        "flatten_structured_array": "",
        "floor": "floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "floor_divide": "floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "fmod": "fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "frombuffer": "frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None)",
        "fromflex": "",
        "fromfunction": "fromfunction(function, shape, **dtype)",
        "getdata": "",
        "getmask": "",
        "getmaskarray": "",
        "greater": "greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "greater_equal": "greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "harden_mask": "    harden_mask(self)",
        "hsplit": "hsplit(*args, **kwargs)",
        "hstack": "hstack(*args, **kwargs)",
        "hypot": "hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "identity": "identity(n, dtype=None)",
        "ids": "    ids(self)",
        "in1d": "",
        "indices": "",
        "inner": "inner(a, b)",
        "innerproduct": "inner(a, b)",
        "intersect1d": "",
        "isMA": "",
        "isMaskedArray": "",
        "is_mask": "",
        "is_masked": "",
        "isarray": "",
        "isin": "",
        "left_shift": "",
        "less": "less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "less_equal": "less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "log": "log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "log10": "log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "log2": "log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "logical_and": "logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "logical_not": "logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "logical_or": "logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "logical_xor": "logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "make_mask": "",
        "make_mask_descr": "",
        "make_mask_none": "",
        "mask_cols": "",
        "mask_or": "",
        "mask_rowcols": "",
        "mask_rows": "",
        "masked_all": "",
        "masked_all_like": "",
        "masked_array": "",
        "masked_equal": "",
        "masked_greater": "",
        "masked_greater_equal": "",
        "masked_inside": "",
        "masked_invalid": "",
        "masked_less": "",
        "masked_less_equal": "",
        "masked_not_equal": "",
        "masked_object": "",
        "masked_outside": "",
        "masked_values": "",
        "masked_where": "",
        "max": "",
        "maximum": "maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "maximum_fill_value": "",
        "mean": "    mean(self, axis=None, dtype=None, out=None, keepdims=<no value>)",
        "median": "",
        "min": "",
        "minimum": "minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "minimum_fill_value": "",
        "mod": "remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "multiply": "multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "mvoid": "",
        "ndim": "",
        "negative": "negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "nonzero": "    nonzero(self)",
        "not_equal": "not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "notmasked_contiguous": "",
        "notmasked_edges": "",
        "ones": "ones(shape, dtype=None, order='C')",
        "outer": "Compute the outer product of two vectors.",
        "outerproduct": "Compute the outer product of two vectors.",
        "polyfit": "Least squares polynomial fit.",
        "power": "",
        "prod": "    prod(self, axis=None, dtype=None, out=None, keepdims=<no value>)",
        "product": "    prod(self, axis=None, dtype=None, out=None, keepdims=<no value>)",
        "ptp": "",
        "put": "",
        "putmask": "",
        "ravel": "    ravel(self, order='C')",
        "remainder": "remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "repeat": "    repeat(self, *args, **params)",
        "reshape": "",
        "resize": "",
        "right_shift": "",
        "round": "",
        "round_": "",
        "row_stack": "vstack(*args, **kwargs)",
        "set_fill_value": "",
        "setdiff1d": "",
        "setxor1d": "",
        "shape": "",
        "sin": "sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "sinh": "sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "size": "",
        "soften_mask": "    soften_mask(self)",
        "sometrue": "",
        "sort": "",
        "sqrt": "sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "squeeze": "",
        "stack": "stack(*args, **kwargs)",
        "std": "    std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)",
        "subtract": "subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "sum": "    sum(self, axis=None, dtype=None, out=None, keepdims=<no value>)",
        "swapaxes": "    swapaxes(self, *args, **params)",
        "take": "",
        "tan": "tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "tanh": "tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "test": "",
        "trace": "    trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None)",
        "transpose": "",
        "true_divide": "true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
        "union1d": "",
        "unique": "",
        "vander": "Generate a Vandermonde matrix.",
        "var": "    var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)",
        "vstack": "vstack(*args, **kwargs)",
        "where": "",
        "zeros": "zeros(shape, dtype=float, order='C', *, like=None)"
    }
}