{
    "Random": {
        "betavariate": "Beta distribution.",
        "choice": "Choose a random element from a non-empty sequence.",
        "choices": "Return a k sized list of population elements chosen with replacement.",
        "expovariate": "Exponential distribution.",
        "gammavariate": "Gamma distribution.  Not the gamma function!",
        "gauss": "Gaussian distribution.",
        "getrandbits": "getrandbits(k) -> x.  Generates an int with k random bits.",
        "getstate": "Return internal state; can be passed to setstate() later.",
        "lognormvariate": "Log normal distribution.",
        "normalvariate": "Normal distribution.",
        "paretovariate": "Pareto distribution.  alpha is the shape parameter.",
        "randbytes": "Generate n random bytes.",
        "randint": "Return random integer in range [a, b], including both end points.",
        "random": "random() -> x in the interval [0, 1).",
        "randrange": "Choose a random item from range(start, stop[, step]).",
        "sample": "Chooses k unique random elements from a population sequence or set.",
        "seed": "Initialize internal state from a seed.",
        "setstate": "Restore internal state from object returned by getstate().",
        "shuffle": "Shuffle list x in place, and return None.",
        "triangular": "Triangular distribution.",
        "uniform": "Get a random number in the range [a, b) or [a, b] depending on rounding.",
        "vonmisesvariate": "Circular data distribution.",
        "weibullvariate": "Weibull distribution."
    },
    "SystemRandom": {
        "betavariate": "Beta distribution.",
        "choice": "Choose a random element from a non-empty sequence.",
        "choices": "Return a k sized list of population elements chosen with replacement.",
        "expovariate": "Exponential distribution.",
        "gammavariate": "Gamma distribution.  Not the gamma function!",
        "gauss": "Gaussian distribution.",
        "getrandbits": "getrandbits(k) -> x.  Generates an int with k random bits.",
        "getstate": "Method should not be called for a system random number generator.",
        "lognormvariate": "Log normal distribution.",
        "normalvariate": "Normal distribution.",
        "paretovariate": "Pareto distribution.  alpha is the shape parameter.",
        "randbytes": "Generate n random bytes.",
        "randint": "Return random integer in range [a, b], including both end points.",
        "random": "Get the next random number in the range [0.0, 1.0).",
        "randrange": "Choose a random item from range(start, stop[, step]).",
        "sample": "Chooses k unique random elements from a population sequence or set.",
        "seed": "Stub method.  Not used for a system random number generator.",
        "setstate": "Method should not be called for a system random number generator.",
        "shuffle": "Shuffle list x in place, and return None.",
        "triangular": "Triangular distribution.",
        "uniform": "Get a random number in the range [a, b) or [a, b] depending on rounding.",
        "vonmisesvariate": "Circular data distribution.",
        "weibullvariate": "Weibull distribution."
    },
    "betavariate": {},
    "choice": {},
    "choices": {},
    "expovariate": {},
    "gammavariate": {},
    "gauss": {},
    "getrandbits": {},
    "getstate": {},
    "lognormvariate": {},
    "normalvariate": {},
    "paretovariate": {},
    "randbytes": {},
    "randint": {},
    "random": {},
    "randrange": {},
    "sample": {},
    "seed": {},
    "setstate": {},
    "shuffle": {},
    "triangular": {},
    "uniform": {},
    "vonmisesvariate": {},
    "weibullvariate": {}
}