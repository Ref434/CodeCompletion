{
    "ChainMap": {
        "__class__": "Metaclass for defining Abstract Base Classes (ABCs).",
        "__class_getitem__": "Represent a PEP 585 generic type",
        "__copy__": "New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__init__": "Initialize a ChainMap by setting *maps* to the given mappings.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "clear": "Clear maps[0], leaving maps[1:] intact.",
        "copy": "New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]",
        "fromkeys": "Create a ChainMap with a single dict created from the iterable.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "new_child": "New ChainMap with a new map followed by all previous maps.",
        "pop": "Remove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0].",
        "popitem": "Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.",
        "setdefault": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D",
        "update": " D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "Counter": {
        "__add__": "Add counts from two counters.",
        "__and__": " Intersection is the minimum of corresponding counts.",
        "__class__": "type(object) -> the object's type",
        "__class_getitem__": "See PEP 585",
        "__contains__": "True if the dictionary has the specified key, else False.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Like dict.__delitem__() but does not raise KeyError for missing values.",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "x.__getitem__(y) <==> x[y]",
        "__gt__": "Return self>value.",
        "__iadd__": "Inplace add from another counter, keeping only positive counts.",
        "__iand__": "Inplace intersection is the minimum of corresponding counts.",
        "__init__": "Create a new, empty Counter object.  And if given, count elements",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__ior__": "Inplace union is the maximum of value from either counter.",
        "__isub__": "Inplace subtract counter, but keep only results with positive counts.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__missing__": "The count of elements not in the Counter is zero.",
        "__ne__": "Return self!=value.",
        "__neg__": "Subtracts from an empty counter.  Strips positive and zero counts,",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Union is the maximum of value in either of the input counters.",
        "__pos__": "Adds an empty counter, effectively stripping negative and zero counts",
        "__reduce_ex__": "Helper for pickle.",
        "__reversed__": "Return a reverse iterator over the dict keys.",
        "__ror__": "Return value|self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__sizeof__": "D.__sizeof__() -> size of D in memory, in bytes",
        "__str__": "Return str(self).",
        "__sub__": " Subtract count, but keep only results with positive counts.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "_keep_positive": "Internal method to strip elements with a negative or zero count",
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "Return a shallow copy.",
        "elements": "Iterator over elements repeating each as many times as its count.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "most_common": "List the n most common elements and their counts from the most",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "subtract": "Like dict.update() but subtracts counts instead of replacing them.",
        "update": "Like dict.update() but add counts instead of replacing them.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "OrderedDict": {
        "__class__": "type(object) -> the object's type",
        "__class_getitem__": "See PEP 585",
        "__contains__": "True if the dictionary has the specified key, else False.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "x.__getitem__(y) <==> x[y]",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__ior__": "Return self|=value.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__reduce__": "Return state information for pickling",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__reversed__": "od.__reversed__() <==> reversed(od)",
        "__ror__": "Return value|self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "clear": "od.clear() -> None.  Remove all items from od.",
        "copy": "od.copy() -> a shallow copy of od",
        "fromkeys": "Create a new ordered dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "move_to_end": "Move an existing element to the end (or beginning if last is false).",
        "pop": "od.pop(k[,d]) -> v, remove specified key and return the corresponding",
        "popitem": "Remove and return a (key, value) pair from the dictionary.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary."
    },
    "UserDict": {
        "__class__": "Metaclass for defining Abstract Base Classes (ABCs).",
        "__class_getitem__": "Represent a PEP 585 generic type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "clear": "D.clear() -> None.  Remove all items from D.",
        "get": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "D.popitem() -> (k, v), remove and return some (key, value) pair",
        "setdefault": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D",
        "update": " D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "UserList": {
        "__class__": "Metaclass for defining Abstract Base Classes (ABCs).",
        "__class_getitem__": "Represent a PEP 585 generic type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__format__": "Default object formatter.",
        "__getattribute__": "Return getattr(self, name).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self)."
    },
    "UserString": {
        "__class__": "Metaclass for defining Abstract Base Classes (ABCs).",
        "__class_getitem__": "Represent a PEP 585 generic type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__format__": "Default object formatter.",
        "__getattribute__": "Return getattr(self, name).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "maketrans": "Return a translation table usable for str.translate()."
    },
    "defaultdict": {
        "__class__": "type(object) -> the object's type",
        "__class_getitem__": "See PEP 585",
        "__contains__": "True if the dictionary has the specified key, else False.",
        "__copy__": "D.copy() -> a shallow copy of D.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "x.__getitem__(y) <==> x[y]",
        "__gt__": "Return self>value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__ior__": "Return self|=value.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__missing__": "__missing__(key) # Called by __getitem__ for missing key; pseudo-code:",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__reduce__": "Return state information for pickling.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__reversed__": "Return a reverse iterator over the dict keys.",
        "__ror__": "Return value|self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__sizeof__": "D.__sizeof__() -> size of D in memory, in bytes",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "clear": "D.clear() -> None.  Remove all items from D.",
        "copy": "D.copy() -> a shallow copy of D.",
        "fromkeys": "Create a new dictionary with keys from iterable and values set to value.",
        "get": "Return the value for key if key is in the dictionary, else default.",
        "items": "D.items() -> a set-like object providing a view on D's items",
        "keys": "D.keys() -> a set-like object providing a view on D's keys",
        "pop": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.",
        "popitem": "Remove and return a (key, value) pair as a 2-tuple.",
        "setdefault": "Insert key with a value of default if key is not in the dictionary.",
        "update": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.",
        "values": "D.values() -> an object providing a view on D's values"
    },
    "deque": {
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__class_getitem__": "See PEP 585",
        "__contains__": "Return key in self.",
        "__copy__": "Return a shallow copy of a deque.",
        "__delattr__": "Implement delattr(self, name).",
        "__delitem__": "Delete self[key].",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__iadd__": "Implement self+=value.",
        "__imul__": "Implement self*=value.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__iter__": "Implement iter(self).",
        "__le__": "Return self<=value.",
        "__len__": "Return len(self).",
        "__lt__": "Return self<value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Return state information for pickling.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__reversed__": "D.__reversed__() -- return a reverse iterator over the deque",
        "__rmul__": "Return value*self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__setitem__": "Set self[key] to value.",
        "__sizeof__": "D.__sizeof__() -- size of D in memory, in bytes",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "append": "Add an element to the right side of the deque.",
        "appendleft": "Add an element to the left side of the deque.",
        "clear": "Remove all elements from the deque.",
        "copy": "Return a shallow copy of a deque.",
        "count": "D.count(value) -> integer -- return number of occurrences of value",
        "extend": "Extend the right side of the deque with elements from the iterable",
        "extendleft": "Extend the left side of the deque with elements from the iterable",
        "index": "D.index(value, [start, [stop]]) -> integer -- return first index of value.",
        "insert": "D.insert(index, object) -- insert object before index",
        "pop": "Remove and return the rightmost element.",
        "popleft": "Remove and return the leftmost element.",
        "remove": "D.remove(value) -- remove first occurrence of value.",
        "reverse": "D.reverse() -- reverse *IN PLACE*",
        "rotate": "Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left."
    },
    "namedtuple": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    }
}