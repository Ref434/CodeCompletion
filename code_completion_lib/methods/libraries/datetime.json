{
    "date": {
        "__add__": "Return self+value.",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Formats self with strftime.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__radd__": "Return value+self.",
        "__reduce__": "__reduce__() -> (cls, state)",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rsub__": "Return value-self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "ctime": "Return ctime() style string.",
        "fromisocalendar": "int, int, int -> Construct a date from the ISO year, week number and weekday.",
        "fromisoformat": "str -> Construct a date from the output of date.isoformat()",
        "fromordinal": "int -> date corresponding to a proleptic Gregorian ordinal.",
        "fromtimestamp": "Create a date from a POSIX timestamp.",
        "isocalendar": "Return a named tuple containing ISO year, week number, and weekday.",
        "isoformat": "Return string in ISO 8601 format, YYYY-MM-DD.",
        "isoweekday": "Return the day of the week represented by the date.",
        "replace": "Return date with new specified fields.",
        "strftime": "format -> strftime() style string.",
        "timetuple": "Return time tuple, compatible with time.localtime().",
        "today": "Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).",
        "toordinal": "Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.",
        "weekday": "Return the day of the week represented by the date."
    },
    "datetime": {
        "__add__": "Return self+value.",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Formats self with strftime.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__radd__": "Return value+self.",
        "__reduce__": "__reduce__() -> (cls, state)",
        "__reduce_ex__": "__reduce_ex__(proto) -> (cls, state)",
        "__repr__": "Return repr(self).",
        "__rsub__": "Return value-self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "astimezone": "tz -> convert to local time in new timezone tz",
        "combine": "date, time -> datetime with same date and time fields",
        "ctime": "Return ctime() style string.",
        "date": "Return date object with same year, month and day.",
        "dst": "Return self.tzinfo.dst(self).",
        "fromisocalendar": "int, int, int -> Construct a date from the ISO year, week number and weekday.",
        "fromisoformat": "string -> datetime from datetime.isoformat() output",
        "fromordinal": "int -> date corresponding to a proleptic Gregorian ordinal.",
        "fromtimestamp": "timestamp[, tz] -> tz's local time from POSIX timestamp.",
        "isocalendar": "Return a named tuple containing ISO year, week number, and weekday.",
        "isoformat": "[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].",
        "isoweekday": "Return the day of the week represented by the date.",
        "now": "Returns new datetime object representing current time local to tz.",
        "replace": "Return datetime with new specified fields.",
        "strftime": "format -> strftime() style string.",
        "strptime": "string, format -> new datetime parsed from a string (like time.strptime()).",
        "time": "Return time object with same time but with tzinfo=None.",
        "timestamp": "Return POSIX timestamp as float.",
        "timetuple": "Return time tuple, compatible with time.localtime().",
        "timetz": "Return time object with same time and tzinfo.",
        "today": "Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).",
        "toordinal": "Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.",
        "tzname": "Return self.tzinfo.tzname(self).",
        "utcfromtimestamp": "Construct a naive UTC datetime from a POSIX timestamp.",
        "utcnow": "Return a new datetime representing UTC day and time.",
        "utcoffset": "Return self.tzinfo.utcoffset(self).",
        "utctimetuple": "Return UTC time tuple, compatible with time.localtime().",
        "weekday": "Return the day of the week represented by the date."
    },
    "time": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Formats self with strftime.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "__reduce__() -> (cls, state)",
        "__reduce_ex__": "__reduce_ex__(proto) -> (cls, state)",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "dst": "Return self.tzinfo.dst(self).",
        "fromisoformat": "string -> time from time.isoformat() output",
        "isoformat": "Return string in ISO 8601 format, [HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].",
        "replace": "Return time with new specified fields.",
        "strftime": "format -> strftime() style string.",
        "tzname": "Return self.tzinfo.tzname(self).",
        "utcoffset": "Return self.tzinfo.utcoffset(self)."
    },
    "timedelta": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__bool__": "True if self else False",
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__floordiv__": "Return self//value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__pos__": "+self",
        "__radd__": "Return value+self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "__reduce__() -> (cls, state)",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "total_seconds": "Total seconds in the duration."
    },
    "timezone": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getinitargs__": "pickle support",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "-> (cls, state)",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "dst": "Return None.",
        "fromutc": "datetime in UTC -> datetime in local time.",
        "tzname": "If name is specified when timezone is created, returns the name.  Otherwise returns offset as 'UTC(+|-)HH:MM'.",
        "utcoffset": "Return fixed offset."
    },
    "tzinfo": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "-> (cls, state)",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "dst": "datetime -> DST offset as timedelta positive east of UTC.",
        "fromutc": "datetime in UTC -> datetime in local time.",
        "tzname": "datetime -> string name of time zone.",
        "utcoffset": "datetime -> timedelta showing offset from UTC, negative values indicating West of UTC"
    },
    "MINYEAR": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "MAXYEAR": {
        "__abs__": "abs(self)",
        "__add__": "Return self+value.",
        "__and__": "Return self&value.",
        "__bool__": "True if self else False",
        "__ceil__": "Ceiling of an Integral returns itself.",
        "__class__": "int([x]) -> integer",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__divmod__": "Return divmod(self, value).",
        "__eq__": "Return self==value.",
        "__float__": "float(self)",
        "__floor__": "Flooring an Integral returns itself.",
        "__floordiv__": "Return self//value.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__index__": "Return self converted to an integer, if self is suitable for use as an index into a list.",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__int__": "int(self)",
        "__invert__": "~self",
        "__le__": "Return self<=value.",
        "__lshift__": "Return self<<value.",
        "__lt__": "Return self<value.",
        "__mod__": "Return self%value.",
        "__mul__": "Return self*value.",
        "__ne__": "Return self!=value.",
        "__neg__": "-self",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__or__": "Return self|value.",
        "__pos__": "+self",
        "__pow__": "Return pow(self, value, mod).",
        "__radd__": "Return value+self.",
        "__rand__": "Return value&self.",
        "__rdivmod__": "Return divmod(value, self).",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__rfloordiv__": "Return value//self.",
        "__rlshift__": "Return value<<self.",
        "__rmod__": "Return value%self.",
        "__rmul__": "Return value*self.",
        "__ror__": "Return value|self.",
        "__round__": "Rounding an Integral returns itself.",
        "__rpow__": "Return pow(value, self, mod).",
        "__rrshift__": "Return value>>self.",
        "__rshift__": "Return self>>value.",
        "__rsub__": "Return value-self.",
        "__rtruediv__": "Return value/self.",
        "__rxor__": "Return value^self.",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Returns size in memory, in bytes.",
        "__str__": "Return str(self).",
        "__sub__": "Return self-value.",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "__truediv__": "Return self/value.",
        "__trunc__": "Truncating an Integral returns itself.",
        "__xor__": "Return self^value.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    }
}