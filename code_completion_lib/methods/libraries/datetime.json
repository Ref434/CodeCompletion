{
    "date": {
        "ctime": "Return ctime() style string.",
        "fromisocalendar": "int, int, int -> Construct a date from the ISO year, week number and weekday.",
        "fromisoformat": "str -> Construct a date from the output of date.isoformat()",
        "fromordinal": "int -> date corresponding to a proleptic Gregorian ordinal.",
        "fromtimestamp": "Create a date from a POSIX timestamp.",
        "isocalendar": "Return a named tuple containing ISO year, week number, and weekday.",
        "isoformat": "Return string in ISO 8601 format, YYYY-MM-DD.",
        "isoweekday": "Return the day of the week represented by the date.",
        "replace": "Return date with new specified fields.",
        "strftime": "format -> strftime() style string.",
        "timetuple": "Return time tuple, compatible with time.localtime().",
        "today": "Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).",
        "toordinal": "Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.",
        "weekday": "Return the day of the week represented by the date."
    },
    "datetime": {
        "astimezone": "tz -> convert to local time in new timezone tz",
        "combine": "date, time -> datetime with same date and time fields",
        "ctime": "Return ctime() style string.",
        "date": "Return date object with same year, month and day.",
        "dst": "Return self.tzinfo.dst(self).",
        "fromisocalendar": "int, int, int -> Construct a date from the ISO year, week number and weekday.",
        "fromisoformat": "string -> datetime from datetime.isoformat() output",
        "fromordinal": "int -> date corresponding to a proleptic Gregorian ordinal.",
        "fromtimestamp": "timestamp[, tz] -> tz's local time from POSIX timestamp.",
        "isocalendar": "Return a named tuple containing ISO year, week number, and weekday.",
        "isoformat": "[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].",
        "isoweekday": "Return the day of the week represented by the date.",
        "now": "Returns new datetime object representing current time local to tz.",
        "replace": "Return datetime with new specified fields.",
        "strftime": "format -> strftime() style string.",
        "strptime": "string, format -> new datetime parsed from a string (like time.strptime()).",
        "time": "Return time object with same time but with tzinfo=None.",
        "timestamp": "Return POSIX timestamp as float.",
        "timetuple": "Return time tuple, compatible with time.localtime().",
        "timetz": "Return time object with same time and tzinfo.",
        "today": "Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).",
        "toordinal": "Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.",
        "tzname": "Return self.tzinfo.tzname(self).",
        "utcfromtimestamp": "Construct a naive UTC datetime from a POSIX timestamp.",
        "utcnow": "Return a new datetime representing UTC day and time.",
        "utcoffset": "Return self.tzinfo.utcoffset(self).",
        "utctimetuple": "Return UTC time tuple, compatible with time.localtime().",
        "weekday": "Return the day of the week represented by the date."
    },
    "time": {
        "dst": "Return self.tzinfo.dst(self).",
        "fromisoformat": "string -> time from time.isoformat() output",
        "isoformat": "Return string in ISO 8601 format, [HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].",
        "replace": "Return time with new specified fields.",
        "strftime": "format -> strftime() style string.",
        "tzname": "Return self.tzinfo.tzname(self).",
        "utcoffset": "Return self.tzinfo.utcoffset(self)."
    },
    "timedelta": {
        "total_seconds": "Total seconds in the duration."
    },
    "timezone": {
        "dst": "Return None.",
        "fromutc": "datetime in UTC -> datetime in local time.",
        "tzname": "If name is specified when timezone is created, returns the name.  Otherwise returns offset as 'UTC(+|-)HH:MM'.",
        "utcoffset": "Return fixed offset."
    },
    "tzinfo": {
        "dst": "datetime -> DST offset as timedelta positive east of UTC.",
        "fromutc": "datetime in UTC -> datetime in local time.",
        "tzname": "datetime -> string name of time zone.",
        "utcoffset": "datetime -> timedelta showing offset from UTC, negative values indicating West of UTC"
    },
    "MINYEAR": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "MAXYEAR": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    }
}