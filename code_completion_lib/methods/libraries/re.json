{
    "match": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "fullmatch": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "search": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "sub": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "subn": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "split": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "findall": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "finditer": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "compile": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "purge": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "template": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "escape": {
        "__call__": "Call self as a function.",
        "__class__": "Create a function object.",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__get__": "Return an attribute of instance, which is of type owner.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass()."
    },
    "error": {
        "__class__": "type(object) -> the object's type",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "Pattern": {
        "__class__": "type(object) -> the object's type",
        "__class_getitem__": "See PEP 585",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "findall": "Return a list of all non-overlapping matches of pattern in string.",
        "finditer": "Return an iterator over all non-overlapping matches for the RE pattern in string.",
        "fullmatch": "Matches against all of the string.",
        "match": "Matches zero or more characters at the beginning of the string.",
        "search": "Scan through string looking for a match, and return a corresponding match object instance.",
        "split": "Split string by the occurrences of pattern.",
        "sub": "Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.",
        "subn": "Return the tuple (new_string, number_of_subs_made) found by replacing the leftmost non-overlapping occurrences of pattern with the replacement repl."
    },
    "Match": {
        "__class__": "type(object) -> the object's type",
        "__class_getitem__": "See PEP 585",
        "__delattr__": "Implement delattr(self, name).",
        "__dir__": "Default dir() implementation.",
        "__eq__": "Return self==value.",
        "__format__": "Default object formatter.",
        "__ge__": "Return self>=value.",
        "__getattribute__": "Return getattr(self, name).",
        "__getitem__": "Return self[key].",
        "__gt__": "Return self>value.",
        "__hash__": "Return hash(self).",
        "__init__": "Initialize self.  See help(type(self)) for accurate signature.",
        "__init_subclass__": "This method is called when a class is subclassed.",
        "__le__": "Return self<=value.",
        "__lt__": "Return self<value.",
        "__ne__": "Return self!=value.",
        "__new__": "Create and return a new object.  See help(type) for accurate signature.",
        "__reduce__": "Helper for pickle.",
        "__reduce_ex__": "Helper for pickle.",
        "__repr__": "Return repr(self).",
        "__setattr__": "Implement setattr(self, name, value).",
        "__sizeof__": "Size of object in memory, in bytes.",
        "__str__": "Return str(self).",
        "__subclasshook__": "Abstract classes can override this to customize issubclass().",
        "end": "Return index of the end of the substring matched by group.",
        "expand": "Return the string obtained by doing backslash substitution on the string template, as done by the sub() method.",
        "group": "group([group1, ...]) -> str or tuple.",
        "groupdict": "Return a dictionary containing all the named subgroups of the match, keyed by the subgroup name.",
        "groups": "Return a tuple containing all the subgroups of the match, from 1.",
        "span": "For match object m, return the 2-tuple (m.start(group), m.end(group)).",
        "start": "Return index of the start of the substring matched by group."
    },
    "A": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "I": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "L": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "M": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "S": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "X": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "U": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ASCII": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "IGNORECASE": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "LOCALE": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "MULTILINE": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "DOTALL": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "VERBOSE": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "UNICODE": {
        "__class__": "An enumeration.",
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    }
}