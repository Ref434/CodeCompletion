{
    "match": {},
    "fullmatch": {},
    "search": {},
    "sub": {},
    "subn": {},
    "split": {},
    "findall": {},
    "finditer": {},
    "compile": {},
    "purge": {},
    "template": {},
    "escape": {},
    "error": {
        "with_traceback": "Exception.with_traceback(tb) --"
    },
    "Pattern": {
        "findall": "Return a list of all non-overlapping matches of pattern in string.",
        "finditer": "Return an iterator over all non-overlapping matches for the RE pattern in string.",
        "fullmatch": "Matches against all of the string.",
        "match": "Matches zero or more characters at the beginning of the string.",
        "search": "Scan through string looking for a match, and return a corresponding match object instance.",
        "split": "Split string by the occurrences of pattern.",
        "sub": "Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.",
        "subn": "Return the tuple (new_string, number_of_subs_made) found by replacing the leftmost non-overlapping occurrences of pattern with the replacement repl."
    },
    "Match": {
        "end": "Return index of the end of the substring matched by group.",
        "expand": "Return the string obtained by doing backslash substitution on the string template, as done by the sub() method.",
        "group": "group([group1, ...]) -> str or tuple.",
        "groupdict": "Return a dictionary containing all the named subgroups of the match, keyed by the subgroup name.",
        "groups": "Return a tuple containing all the subgroups of the match, from 1.",
        "span": "For match object m, return the 2-tuple (m.start(group), m.end(group)).",
        "start": "Return index of the start of the substring matched by group."
    },
    "A": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "I": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "L": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "M": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "S": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "X": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "U": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "ASCII": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "IGNORECASE": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "LOCALE": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "MULTILINE": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "DOTALL": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "VERBOSE": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    },
    "UNICODE": {
        "as_integer_ratio": "Return integer ratio.",
        "bit_length": "Number of bits necessary to represent self in binary.",
        "conjugate": "Returns self, the complex conjugate of any int.",
        "from_bytes": "Return the integer represented by the given array of bytes.",
        "to_bytes": "Return an array of bytes representing an integer."
    }
}