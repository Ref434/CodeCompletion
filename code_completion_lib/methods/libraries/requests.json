{
    "ConnectTimeout": {},
    "ConnectionError": {},
    "DependencyWarning": {},
    "FileModeWarning": {},
    "HTTPError": {},
    "JSONDecodeError": {},
    "NullHandler": {
        "format": ""
    },
    "PreparedRequest": {},
    "ReadTimeout": {},
    "Request": {},
    "RequestException": {},
    "RequestsDependencyWarning": {},
    "Response": {},
    "Session": {},
    "Timeout": {},
    "TooManyRedirects": {},
    "URLRequired": {},
    "chardet_version": {},
    "charset_normalizer_version": {
        "capitalize": "Return a capitalized version of the string.",
        "casefold": "Return a version of the string suitable for caseless comparisons.",
        "center": "Return a centered string of length width.",
        "count": "S.count(sub[, start[, end]]) -> int",
        "encode": "Encode the string using the codec registered for encoding.",
        "endswith": "S.endswith(suffix[, start[, end]]) -> bool",
        "expandtabs": "Return a copy where all tab characters are expanded using spaces.",
        "find": "S.find(sub[, start[, end]]) -> int",
        "format": "S.format(*args, **kwargs) -> str",
        "format_map": "S.format_map(mapping) -> str",
        "index": "S.index(sub[, start[, end]]) -> int",
        "isalnum": "Return True if the string is an alpha-numeric string, False otherwise.",
        "isalpha": "Return True if the string is an alphabetic string, False otherwise.",
        "isascii": "Return True if all characters in the string are ASCII, False otherwise.",
        "isdecimal": "Return True if the string is a decimal string, False otherwise.",
        "isdigit": "Return True if the string is a digit string, False otherwise.",
        "isidentifier": "Return True if the string is a valid Python identifier, False otherwise.",
        "islower": "Return True if the string is a lowercase string, False otherwise.",
        "isnumeric": "Return True if the string is a numeric string, False otherwise.",
        "isprintable": "Return True if the string is printable, False otherwise.",
        "isspace": "Return True if the string is a whitespace string, False otherwise.",
        "istitle": "Return True if the string is a title-cased string, False otherwise.",
        "isupper": "Return True if the string is an uppercase string, False otherwise.",
        "join": "Concatenate any number of strings.",
        "ljust": "Return a left-justified string of length width.",
        "lower": "Return a copy of the string converted to lowercase.",
        "lstrip": "Return a copy of the string with leading whitespace removed.",
        "maketrans": "Return a translation table usable for str.translate().",
        "partition": "Partition the string into three parts using the given separator.",
        "removeprefix": "Return a str with the given prefix string removed if present.",
        "removesuffix": "Return a str with the given suffix string removed if present.",
        "replace": "Return a copy with all occurrences of substring old replaced by new.",
        "rfind": "S.rfind(sub[, start[, end]]) -> int",
        "rindex": "S.rindex(sub[, start[, end]]) -> int",
        "rjust": "Return a right-justified string of length width.",
        "rpartition": "Partition the string into three parts using the given separator.",
        "rsplit": "Return a list of the words in the string, using sep as the delimiter string.",
        "rstrip": "Return a copy of the string with trailing whitespace removed.",
        "split": "Return a list of the words in the string, using sep as the delimiter string.",
        "splitlines": "Return a list of the lines in the string, breaking at line boundaries.",
        "startswith": "S.startswith(prefix[, start[, end]]) -> bool",
        "strip": "Return a copy of the string with leading and trailing whitespace removed.",
        "swapcase": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "title": "Return a version of the string where each word is titlecased.",
        "translate": "Replace each character in the string using the given translation table.",
        "upper": "Return a copy of the string converted to uppercase.",
        "zfill": "Pad a numeric string with zeros on the left, to fill a field of the given width."
    },
    "check_compatibility": {},
    "codes": {},
    "delete": {},
    "get": {},
    "head": {},
    "logging": {},
    "options": {},
    "packages": {},
    "patch": {},
    "post": {},
    "put": {},
    "request": {},
    "session": {},
    "ssl": {},
    "urllib3": {},
    "utils": {},
    "warnings": {}
}